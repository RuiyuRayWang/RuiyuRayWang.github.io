<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Single Cell Biology on Karmotrine Dream</title>
    <link>/tags/single-cell-biology/</link>
    <description>Recent content in Single Cell Biology on Karmotrine Dream</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 20 Feb 2022 10:55:43 +0800</lastBuildDate><atom:link href="/tags/single-cell-biology/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>一图看懂单细胞文库Reads的组成成分</title>
      <link>/post/10x_reads_composition/</link>
      <pubDate>Sun, 20 Feb 2022 10:55:43 +0800</pubDate>
      
      <guid>/post/10x_reads_composition/</guid>
      <description>这篇文章是前两篇技术文档的后续：
 10X CellRanger 中测序饱和度的定义与计算（一） 10X CellRanger 中测序饱和度的定义与计算（二）  上两篇文章成文过程中，我意识到单细胞测序文库从rawdata到deduplicated reads这套分析流程，其实是non-trivial的。Input Raw Reads从下机开始，需经过层层筛选和运算，最终只有少部分信息能保留在表达矩阵（或counts table）中。这里用一张图总结，以帮助我们更好地理解单细胞文库的建库和上游分析（Upstream Analysis）。
 Reads Composition in scRNA-seq with Barcodes and UMI
 本文以ScRNAseq_smkpipe_at_Luolab为例。该方法的Chemistry和10X v2/v3的Chemistry可能非常相似，引入了cell barcode和UMI，但二者在某些技术实现上有些不同，具体是哪些区别与本文无关，在此不再赘述。</description>
    </item>
    
    <item>
      <title>10X CellRanger 中测序饱和度的定义与计算（一）</title>
      <link>/post/10x_calc_saturation_1/</link>
      <pubDate>Tue, 08 Feb 2022 22:05:51 +0800</pubDate>
      
      <guid>/post/10x_calc_saturation_1/</guid>
      <description>最近为了搭建单细胞测序上游分析的Pipeline，正在研究怎样对分析结果做质控（Pipeline详情移步https://github.com/RuiyuRayWang/ScRNAseq_smkpipe_at_Luolab）。参考了10X CellRanger官方网站中描述的对测序饱和度的定义和计算方法：
 10X 官方文档：什么是测序饱和度？ 10X 官方文档：测序饱和度怎样计算？  将用两篇文章记录这部分内容。
注意：本系列文章的参考来源均为10X官方公开的信息。
这篇文章是本系列文章的第一篇，将对相关概念和计算公式的定义进行解读。
 一、测序饱和度 和 文库复杂度 关于测序饱和度的定义，引用10X文档中的说明：
 Question: What is sequencing saturation?
Answer: Sequencing saturation is a measure of the fraction of library complexity that was sequenced in a given experiment. The inverse of the sequencing saturation can be interpreted as the number of additional reads it would take to detect a new transcript.
 这两句话言简而意赅，点明了测序饱和度(sequencing saturation)与文库复杂度(library complexity)之间的关系。
library complexity (文库复杂度)，指的是一个测序文库中非冗余的DNA片段的数量（the number of unique DNA fragments present in a given library）。</description>
    </item>
    
    <item>
      <title>10X CellRanger 中测序饱和度的定义与计算（二）</title>
      <link>/post/10x_calc_saturation_2/</link>
      <pubDate>Tue, 08 Feb 2022 22:05:51 +0800</pubDate>
      
      <guid>/post/10x_calc_saturation_2/</guid>
      <description>最近为了搭建单细胞测序上游分析的Pipeline，正在研究怎样对分析结果做质控（Pipeline详情移步https://github.com/RuiyuRayWang/ScRNAseq_smkpipe_at_Luolab）。参考了10X CellRanger官方网站中描述的对测序饱和度的定义和计算方法：
 10X 官方文档：什么是测序饱和度？ 10X 官方文档：测序饱和度怎样计算？  将用两篇文章记录这部分内容。
注意：本系列文章的参考来源均为10X官方公开的信息。
这篇文章是本系列文章的第二篇，将利用10X官方文档中的示例数据来展示测序饱和度计算的代码复现。
 下载数据：
 Uses dataset at https://support.10xgenomics.com/single-cell-gene-expression/datasets/3.0.0/pbmc_1k_v3, where the web summary report gives a sequencing saturation value of 0.7085123.​
 web_summary.html
 计算公式：
 The sequencing saturation calculation below matches the 0.7085123 sequencing saturation given in the web summary report.
 unique_confidently_mapped_reads = 10,196,940 duplicate_reads = 24,785,461 x = 1 - (unique_confidently_mapped_reads/(unique_confidently_mapped_reads + duplicate_reads)) x = 1 - (10,196,940/(10,196,940 + 24,785,461)) x = 1 - (10,196,940/34,982,401) x = 1 - 0.</description>
    </item>
    
    <item>
      <title>R SCENIC：安装与部署</title>
      <link>/post/install-r-scenic/</link>
      <pubDate>Wed, 22 Dec 2021 12:32:17 +0800</pubDate>
      
      <guid>/post/install-r-scenic/</guid>
      <description>TL;DR First consulted this page
I have R-4.0.5 with Bioconductor 3.12(4.0), use the latest scripts for installation.
In Rstudio:
&amp;gt; if (!requireNamespace(&amp;quot;BiocManager&amp;quot;, quietly = TRUE)) install.packages(&amp;quot;BiocManager&amp;quot;) &amp;gt; BiocManager::version() &amp;gt; # If your bioconductor version is previous to 4.0, see the section bellow &amp;gt; &amp;gt; ## Required &amp;gt; BiocManager::install(c(&amp;quot;AUCell&amp;quot;, &amp;quot;RcisTarget&amp;quot;)) &amp;gt; BiocManager::install(c(&amp;quot;GENIE3&amp;quot;)) # Optional. Can be replaced by GRNBoost &amp;gt; &amp;gt; ## Optional (but highly recommended): &amp;gt; # To score the network on cells (i.</description>
    </item>
    
    <item>
      <title>Working with pySCENIC</title>
      <link>/post/using-scenic/</link>
      <pubDate>Wed, 15 Dec 2021 23:07:11 +0800</pubDate>
      
      <guid>/post/using-scenic/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Tensorflow：多版本部署、系统配置与版本切换</title>
      <link>/post/build-tensorflow/</link>
      <pubDate>Sun, 05 Dec 2021 22:57:25 +0800</pubDate>
      
      <guid>/post/build-tensorflow/</guid>
      <description>Building Environments for Cellassign and CellBLAST with multiple Tensorflow (GPU) Versions on Ubuntu As promised, I will write about my experience with installing tensorflow.
Why did I ever have to build Tensorflow myself?
The reason is that I was trying to use two tools: cellassign and Cell_BLAST, but they depend on different tensorflow versions. To make them both work, I used the following build strategy that allows different Tensorflow versions installed and run in separate conda environments.</description>
    </item>
    
  </channel>
</rss>
