<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Karmotrine Dream</title>
    <link>/</link>
    <description>Recent content on Karmotrine Dream</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 12 Feb 2022 21:17:37 +0800</lastBuildDate>
    
        <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Hugo：启用Mathjax实现数学公式的编辑与显示</title>
        <link>/post/deploy_mathjax/</link>
        <pubDate>Sat, 12 Feb 2022 21:17:37 +0800</pubDate>
        
        <guid>/post/deploy_mathjax/</guid>
        <description>Karmotrine Dream /post/deploy_mathjax/ -&lt;p&gt;The HUGO official document has a nice blog about &lt;a href=&#34;https://bwaycer.github.io/hugo_tutorial.hugo/tutorials/mathjax/&#34;&gt;MathJax Support&lt;/a&gt;.
Additionally, a blog written by Geoff Ruddock has a more concise solution: &lt;a href=&#34;https://geoffruddock.com/math-typesetting-in-hugo/&#34;&gt;Render LaTeX math expressions in Hugo with MathJax 3&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;tldr&#34;&gt;TL;DR&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Create a file in your theme directory &lt;code&gt;layouts/partials/mathjax_support.html&lt;/code&gt; as the following:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;script&amp;gt;
  MathJax = {
    tex: {
      inlineMath: [[&#39;$&#39;, &#39;$&#39;], [&#39;\\(&#39;, &#39;\\)&#39;]],
      displayMath: [[&#39;$$&#39;,&#39;$$&#39;], [&#39;\\[&#39;, &#39;\\]&#39;]],
      processEscapes: true,
      processEnvironments: true
    },
    options: {
      skipHtmlTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;]
    }
  };

  window.addEventListener(&#39;load&#39;, (event) =&amp;gt; {
      document.querySelectorAll(&amp;quot;mjx-container&amp;quot;).forEach(function(x){
        x.parentElement.classList += &#39;has-jax&#39;})
    });

&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;https://polyfill.io/v3/polyfill.min.js?features=es6&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; id=&amp;quot;MathJax-script&amp;quot; async
  src=&amp;quot;https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Next, open the file &lt;code&gt;layouts/partials/header.html&lt;/code&gt; and add the following line just before the closing &lt;!-- raw HTML omitted --&gt; tag:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{{ if .Params.mathjax }}{{ partial &amp;quot;mathjax_support.html&amp;quot; . }}{{ end }}
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Then, add the following lines to your CSS file. You may need to tinker with the contents here depending on your theme, these are just the settings which worked for me.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;code.has-jax {font: inherit;
              font-size: 100%;
              background: inherit;
              border: inherit;
              color: #515151;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To modify css, refer to &lt;a href=&#34;https://www.banjocode.com/post/hugo/custom-css/&#34;&gt;Add Custom CSS Or Javascript To Your Hugo Site&lt;/a&gt;。&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Finally, add &lt;code&gt;mathjax: true&lt;/code&gt; to the YAML frontmatter of any pages containing math markup. Alternatively, you could omit the outer &lt;code&gt;{{ if .Params.mathjax }} … {{ end }}&lt;/code&gt; conditional above to load the library automatically on all pages. However given that this library is quite heavy (it’s consistently the asset that Google PageSpeed Insights complains the most about) and that only &amp;lt;20% of my blog posts contain math at all, this is worth the extra effort for me.&lt;/li&gt;
&lt;/ol&gt;
- /post/deploy_mathjax/ - </description>
        </item>
    
    
    
        <item>
        <title>10X CellRanger 中测序饱和度的定义与计算（一）</title>
        <link>/post/10x_calc_saturation_1/</link>
        <pubDate>Tue, 08 Feb 2022 22:05:51 +0800</pubDate>
        
        <guid>/post/10x_calc_saturation_1/</guid>
        <description>Karmotrine Dream /post/10x_calc_saturation_1/ -&lt;p&gt;最近为了搭建单细胞测序上游分析的Pipeline，正在研究怎样对分析结果做质控（Pipeline详情移步&lt;a href=&#34;https://github.com/RuiyuRayWang/ScRNAseq_smkpipe_at_Luolab&#34;&gt;https://github.com/RuiyuRayWang/ScRNAseq_smkpipe_at_Luolab&lt;/a&gt;）。参考了10X CellRanger官方网站中描述的对测序饱和度的定义和计算方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kb.10xgenomics.com/hc/en-us/articles/115005062366-What-is-sequencing-saturation-&#34;&gt;10X 官方文档：什么是测序饱和度？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kb.10xgenomics.com/hc/en-us/articles/115003646912-How-is-sequencing-saturation-calculated-&#34;&gt;10X 官方文档：测序饱和度怎样计算？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将用两篇文章记录这部分内容。&lt;/p&gt;
&lt;p&gt;这篇文章是本系列文章的第一篇，将对相关概念和计算公式的定义进行解读。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;一测序饱和度-和-文库复杂度&#34;&gt;一、&lt;code&gt;测序饱和度&lt;/code&gt; 和 &lt;code&gt;文库复杂度&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;关于测序饱和度的定义，引用10X文档中的说明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt; What is sequencing saturation?&lt;br&gt;
&lt;strong&gt;Answer:&lt;/strong&gt; Sequencing saturation is a measure of &lt;em&gt;&lt;strong&gt;the fraction of library complexity&lt;/strong&gt;&lt;/em&gt; that was sequenced in a given experiment. The &lt;em&gt;&lt;strong&gt;inverse&lt;/strong&gt;&lt;/em&gt; of the sequencing saturation can be interpreted as the number of additional reads it would take to detect a new transcript.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这两句话言简而意赅，点明了测序饱和度(sequencing saturation)与文库复杂度(library complexity)之间的关系。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gatk.broadinstitute.org/hc/en-us/articles/360037591931-EstimateLibraryComplexity-Picard-&#34;&gt;library complexity (文库复杂度)&lt;/a&gt;，指的是一个测序文库中非冗余的DNA片段的数量（the number of unique DNA fragments present in a given library）。&lt;br&gt;
&lt;strong&gt;&lt;code&gt;测序饱和度&lt;/code&gt;表征了当前的测序数据中测出了多少&lt;code&gt;文库复杂度&lt;/code&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从逆命题的角度来看待这个问题：发明一个新名词&lt;code&gt;“测序不饱和度”&lt;/code&gt;，则&lt;code&gt;“测序不饱和度”&lt;/code&gt;可以定义为 &lt;em&gt;再多测序多少个Reads就可以检测到一个全新的转录本&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/em&gt;。&lt;br&gt;
换句话说，&lt;strong&gt;如果我们只需要再测很少的Reads就可以得到一个全新的转录本，说明这个文库“测序不饱和”；反之，如果需要再测很多Reads才能得到一个全新的转录本，说明这个文库“测序饱和”。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实我们还可以从&lt;strong&gt;冗余信息&lt;/strong&gt;的角度来理解这个问题：&lt;br&gt;
对于一个文库，&lt;strong&gt;如果仅再测很少Reads就检测到了全新的转录本，说明当前数据还远未挖掘出文库中的大部分信息，数据的信息冗余程度比较低，测序不饱和；&lt;/strong&gt;&lt;br&gt;
而反过来，&lt;strong&gt;如果需要再测很多Reads才能检测到全新的转录本，说明当前数据对文库中包含的信息挖掘得比较充分，数据的信息冗余程度比较高，测序接近饱和。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以本质上，测序饱和度可以间接地由&lt;strong&gt;信息冗余程度&lt;/strong&gt;进行度量。&lt;br&gt;
数据信息冗余度越高，测序饱和度越高；&lt;br&gt;
数据信息冗余度越低，测序饱和度越低。&lt;/p&gt;
&lt;p&gt;从实际角度出发，我们有时候&lt;strong&gt;并不希望信息冗余度&lt;/strong&gt;太高。因为冗余信息越多，浪费的资源越多。所以有些研究不会将 测序饱和度 的目标阈值设定到接近饱和（&amp;gt;90%），而是测到70%左右就收工了。&lt;br&gt;
在受经费条件等因素限制的情况下这是一种合理策略。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;二影响测序饱和度的因素&#34;&gt;二、影响测序饱和度的因素&lt;/h3&gt;
&lt;p&gt;在单细胞测序中，测序饱和度主要由两个因素决定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;文库复杂度(Biological Complxity)：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Different cell types will have different amounts of RNA and thus will differ in the total number of different transcripts in the final library (also known as library complexity). The figure below illustrates the median number of genes recovered from different cell types. As sequencing depth increases, more genes are detected, but this reaches saturation at different sequencing depths depending on cell type.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;文库复杂度一般由生物学样本的复杂程度决定。而生物学样本的复杂度又由多个因素，如细胞异质性(Cell Heterogeneity)、转录组RNA含量、细胞质量、细胞数等共同决定。&lt;del&gt;越是简单均一的系统，生物复杂程度越低。&lt;/del&gt;&lt;br&gt;
下图中，原代分离的PBMC(外周血单核细胞)和E18小鼠神经元细胞RNA含量较低（？）&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;，因此迅速达到测序饱和；而培养的永生细胞3T3和HEK293T的RNA含量比较高（？）&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;，测序不容易达到饱和。同样作为永生细胞，3T3细胞系的转录组比HEK293T细胞系的转录组复杂，因此相比之下不容易测序饱和。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测序深度(Sequencing Depth)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sequencing depth also affects sequencing saturation; generally, the more sequencing reads, the more additional unique transcripts you can detect. However, this is limited by the library complexity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即每个文库实际测到的Reads数。在控制其他条件不变的情况下，一般来讲测序深度越高测序饱和度越高，直观上这很容易理解。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://kb.10xgenomics.com/hc/article_attachments/115016412246/SingleCell_GeneRecovery_by_SeqDepth_combined.png#middle&#34; alt=&#34;Figure 1&#34;&gt;&lt;/p&gt;
&lt;p&gt;上面的内容可以总结在一个公式中：&lt;/p&gt;
&lt;p&gt;$$测序饱和度\propto\frac{测序深度}{文库复杂度}$$&lt;/p&gt;
&lt;p&gt;如果一个样本的生物学成分比较复杂，那送样时就可以提前计划适当提高测序深度；如果测完发现测序饱和度还是不够，那就对文库进行加测（提高测序深度）。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;三测序饱和度的计算&#34;&gt;三、测序饱和度的计算&lt;/h3&gt;
&lt;p&gt;10X官方文档给出了测序饱和度计算公式：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$$Sequencing\ Saturation = 1 - \frac{n_{deduped\ reads}}{n_{reads}}$$&lt;br&gt;
where&lt;br&gt;
$n_{deduped\ reads}$ = Number of unique (valid cell-barcode, valid UMI, gene) combinations among confidently mapped reads&lt;br&gt;
$n_{reads}$ = Total number of confidently mapped, valid cell-barcode, valid UMI reads&lt;br&gt;
.&lt;br&gt;
Note that the numerator of the fraction is $n_{deduped\ reads}$, not the non-unique reads that are mentioned in the definition. $n_{deduped\ reads}$ is a degree of uniqueness, not a degree of duplication/saturation. Therefore we take the complement of $n_{deduped\ reads}/n_{reads}$ to measure saturation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即&lt;/p&gt;
&lt;p&gt;$$测序饱和度=1-\frac{去重后Reads数}{总Reads数}=\frac{重复Reads数}{总Reads数}$$&lt;/p&gt;
&lt;p&gt;注意重复Reads是通过Barcode和UMI定义的。两个Reads出现同样的Barcode + UMI组合，就将其中一个定义为重复；三个Reads出现同样的Barcode + UMI组合，其中两个定义为重复，剩下一个定义为去重后Read。&lt;/p&gt;
&lt;p&gt;从这个公式也可以看出，重复Reads数越高，冗余信息越多，测序饱和度也越高。&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;全新的转录本，在10X官方文档的语境下，指的是一个全新的 Barcode + UMI 组合（i.e. a previously unobserved, unique combination of valid cell-barcode and valid UMI）&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;直觉上这并不 make sense。原代细胞有较高的细胞异质性，如果其他条件相同，理应更难达到测序饱和。猜测也许是因为原代细胞分离下来细胞状态不如永生细胞，因此导致文库质量不佳。&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
- /post/10x_calc_saturation_1/ - </description>
        </item>
    
    
    
        <item>
        <title>10X CellRanger 中测序饱和度的定义与计算（二）</title>
        <link>/post/10x_calc_saturation_2/</link>
        <pubDate>Tue, 08 Feb 2022 22:05:51 +0800</pubDate>
        
        <guid>/post/10x_calc_saturation_2/</guid>
        <description>Karmotrine Dream /post/10x_calc_saturation_2/ -&lt;p&gt;最近为了搭建单细胞测序上游分析的Pipeline，正在研究怎样对分析结果做质控（Pipeline详情移步&lt;a href=&#34;https://github.com/RuiyuRayWang/ScRNAseq_smkpipe_at_Luolab&#34;&gt;https://github.com/RuiyuRayWang/ScRNAseq_smkpipe_at_Luolab&lt;/a&gt;）。参考了10X CellRanger官方网站中描述的对测序饱和度的定义和计算方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kb.10xgenomics.com/hc/en-us/articles/115005062366-What-is-sequencing-saturation-&#34;&gt;10X 官方文档：什么是测序饱和度？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kb.10xgenomics.com/hc/en-us/articles/115003646912-How-is-sequencing-saturation-calculated-&#34;&gt;10X 官方文档：测序饱和度怎样计算？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将用两篇文章记录这部分内容。&lt;/p&gt;
&lt;p&gt;这篇文章是本系列文章的第二篇，将用10X官方文档中的示例数据来逐步解析代码实现过程。&lt;/p&gt;
&lt;hr&gt;
- /post/10x_calc_saturation_2/ - </description>
        </item>
    
    
    
        <item>
        <title>R SCENIC：安装与部署</title>
        <link>/post/install-r-scenic/</link>
        <pubDate>Wed, 22 Dec 2021 12:32:17 +0800</pubDate>
        
        <guid>/post/install-r-scenic/</guid>
        <description>Karmotrine Dream /post/install-r-scenic/ -&lt;h1 id=&#34;tldr&#34;&gt;TL;DR&lt;/h1&gt;
&lt;p&gt;First consulted &lt;a href=&#34;http://htmlpreview.github.io/?https://github.com/aertslab/SCENIC/blob/master/inst/doc/SCENIC_Setup.html&#34;&gt;this page&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I have &lt;code&gt;R-4.0.5&lt;/code&gt; with &lt;code&gt;Bioconductor 3.12(4.0)&lt;/code&gt;, use the latest scripts for installation.&lt;/p&gt;
&lt;p&gt;In Rstudio:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; if (!requireNamespace(&amp;quot;BiocManager&amp;quot;, quietly = TRUE)) install.packages(&amp;quot;BiocManager&amp;quot;)
&amp;gt; BiocManager::version()
&amp;gt; # If your bioconductor version is previous to 4.0, see the section bellow
&amp;gt; 
&amp;gt; ## Required
&amp;gt; BiocManager::install(c(&amp;quot;AUCell&amp;quot;, &amp;quot;RcisTarget&amp;quot;))
&amp;gt; BiocManager::install(c(&amp;quot;GENIE3&amp;quot;)) # Optional. Can be replaced by GRNBoost
&amp;gt; 
&amp;gt; ## Optional (but highly recommended):
&amp;gt; # To score the network on cells (i.e. run AUCell):
&amp;gt; BiocManager::install(c(&amp;quot;zoo&amp;quot;, &amp;quot;mixtools&amp;quot;, &amp;quot;rbokeh&amp;quot;))
&amp;gt; # For various visualizations and perform t-SNEs:
&amp;gt; BiocManager::install(c(&amp;quot;DT&amp;quot;, &amp;quot;NMF&amp;quot;, &amp;quot;ComplexHeatmap&amp;quot;, &amp;quot;R2HTML&amp;quot;, &amp;quot;Rtsne&amp;quot;))
&amp;gt; # To support paralell execution (not available in Windows):
&amp;gt; BiocManager::install(c(&amp;quot;doMC&amp;quot;, &amp;quot;doRNG&amp;quot;))
&amp;gt; &amp;gt; # To export/visualize in http://scope.aertslab.org
&amp;gt; if (!requireNamespace(&amp;quot;devtools&amp;quot;, quietly = TRUE)) install.packages(&amp;quot;devtools&amp;quot;)
&amp;gt; devtools::install_github(&amp;quot;aertslab/SCopeLoomR&amp;quot;, build_vignettes = TRUE)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;These worked fine.&lt;/p&gt;
&lt;p&gt;Then, when installing SCENIC using &lt;code&gt;devtools&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; if (!requireNamespace(&amp;quot;devtools&amp;quot;, quietly = TRUE)) install.packages(&amp;quot;devtools&amp;quot;)
&amp;gt; devtools::install_github(&amp;quot;aertslab/SCENIC&amp;quot;) 
Downloading GitHub repo aertslab/SCENIC@HEAD
Error in utils::download.file(url, path, method = method, quiet = quiet,  : 
  download from &#39;https://api.github.com/repos/aertslab/SCENIC/tarball/HEAD&#39; failed
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Tried several times with no success.&lt;/p&gt;
&lt;p&gt;There are some discussions on this behavior with &lt;code&gt;devtools&lt;/code&gt; and &lt;code&gt;remotes&lt;/code&gt;, for example this &lt;a href=&#34;https://github.com/r-lib/remotes/issues/130&#34;&gt;issue&lt;/a&gt;, but I find it un-straightforward.&lt;/p&gt;
&lt;p&gt;Instead, I decided to switch to SCENIC(R) github page and install directly from there.
First tried directly cloning the repo:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git clone https://github.com/aertslab/SCENIC.git
Cloning into &#39;SCENIC&#39;...
fatal: unable to access &#39;https://github.com/aertslab/SCENIC.git/&#39;: Could not resolve host: github.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This also failed!&lt;/p&gt;
&lt;p&gt;Then tried &lt;code&gt;Download ZIP&lt;/code&gt; to local and unzip &lt;code&gt;SCENIC-master.zip&lt;/code&gt;. Create a new project in Rstudio from the directory containing SCENIC build and hit the &lt;code&gt;Install and Restart&lt;/code&gt; button.&lt;/p&gt;
&lt;p&gt;This also failed because of an error of the sort &amp;ldquo;Dependency &amp;lsquo;dynamicTreeCut&amp;rsquo; not available&amp;rdquo;, but this won&amp;rsquo;t be very difficult to solve.&lt;/p&gt;
&lt;p&gt;Install &lt;code&gt;dynamicTreeCut&lt;/code&gt; manually:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; install.packages(&amp;quot;dynamicTreeCut&amp;quot;)
Warning in install.packages :
  unable to access index for repository https://cran.rstudio.com/src/contrib:
  cannot open URL &#39;https://cran.rstudio.com/src/contrib/PACKAGES&#39;
Installing package into ‘/home/luolab/R/x86_64-pc-linux-gnu-library/4.0’
(as ‘lib’ is unspecified)
Warning in install.packages :
  unable to access index for repository https://cran.rstudio.com/src/contrib:
  cannot open URL &#39;https://cran.rstudio.com/src/contrib/PACKAGES&#39;
Warning in install.packages :
  package ‘dynamicTreeCut’ is not available for this version of R

A version of this package for your version of R might be available elsewhere,
see the ideas at
https://cran.r-project.org/doc/manuals/r-patched/R-admin.html#Installing-packages
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To &lt;a href=&#34;https://community.rstudio.com/t/install-packages-unable-to-access-index-for-repository-try-disabling-secure-download-method-for-http/16578&#34;&gt;fix this&lt;/a&gt;, in Rstudio go to &lt;code&gt;Tools&lt;/code&gt; &amp;gt; &lt;code&gt;Global Options&lt;/code&gt; &amp;gt; &lt;code&gt;Packages&lt;/code&gt; and &lt;strong&gt;Uncheck&lt;/strong&gt; &lt;code&gt;Use secure download method for HTTP&lt;/code&gt;. Then:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; install.packages(&amp;quot;dynamicTreeCut&amp;quot;)
Installing package into ‘/home/luolab/R/x86_64-pc-linux-gnu-library/4.0’
(as ‘lib’ is unspecified)
trying URL &#39;http://cran.rstudio.com/src/contrib/dynamicTreeCut_1.63-1.tar.gz&#39;
Content type &#39;application/x-gzip&#39; length 24027 bytes (23 KB)
==================================================
downloaded 23 KB

* installing *source* package ‘dynamicTreeCut’ ...
** package ‘dynamicTreeCut’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* DONE (dynamicTreeCut)

The downloaded source packages are in
	‘/tmp/RtmpgfV9Bj/downloaded_packages’
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Success!&lt;/p&gt;
&lt;p&gt;Now &lt;code&gt;Install and Restart&lt;/code&gt; SCENIC again and everything worked.&lt;/p&gt;
&lt;p&gt;Next job is to import &lt;code&gt;pySCENIC&lt;/code&gt; results to R &lt;code&gt;SCENIC&lt;/code&gt;, consult the followings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aertslab/pySCENIC/issues/180&#34;&gt;Github issue discussion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rawcdn.githack.com/aertslab/SCENIC/0a4c96ed8d930edd8868f07428090f9dae264705/inst/doc/importing_pySCENIC.html&#34;&gt;Vignette&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ps&#34;&gt;P.S.&lt;/h2&gt;
&lt;p&gt;When trying to push this post to github remote, failed again&amp;hellip;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git push -u --all
fatal: unable to access &#39;https://github.com/RuiyuRayWang/blog.git/&#39;: Could not resolve host: github.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Looks like we&amp;rsquo;re having a bad day with github server&amp;hellip;&lt;/p&gt;
- /post/install-r-scenic/ - </description>
        </item>
    
    
    
        <item>
        <title>Working with pySCENIC</title>
        <link>/post/using-scenic/</link>
        <pubDate>Wed, 15 Dec 2021 23:07:11 +0800</pubDate>
        
        <guid>/post/using-scenic/</guid>
        <description>Karmotrine Dream /post/using-scenic/ -- /post/using-scenic/ - </description>
        </item>
    
    
    
        <item>
        <title>Tensorflow：多版本部署、系统配置与版本切换</title>
        <link>/post/build-tensorflow/</link>
        <pubDate>Sun, 05 Dec 2021 22:57:25 +0800</pubDate>
        
        <guid>/post/build-tensorflow/</guid>
        <description>Karmotrine Dream /post/build-tensorflow/ -&lt;h1 id=&#34;building-environments-for-cellassign-and-cellblast-with-multiple-tensorflow-gpu-versions-on-ubuntu&#34;&gt;Building Environments for Cellassign and CellBLAST with multiple Tensorflow (GPU) Versions on Ubuntu&lt;/h1&gt;
&lt;p&gt;As promised, I will write about my experience with installing tensorflow.&lt;/p&gt;
&lt;p&gt;Why did I ever have to build Tensorflow myself?&lt;br&gt;
The reason is that I was trying to use two tools: &lt;code&gt;cellassign&lt;/code&gt; and &lt;code&gt;Cell_BLAST&lt;/code&gt;, but they depend on different tensorflow versions. To make them both work, I used the following build strategy that allows different Tensorflow versions installed and run in separate conda environments.&lt;/p&gt;
&lt;h1 id=&#34;main-references&#34;&gt;Main References:&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.kovalevskyi.com/multiple-version-of-cuda-libraries-on-the-same-machine-b9502d50ae77&#34;&gt;link1&lt;/a&gt; - Best post for the job&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tensorflow.org/install/gpu&#34;&gt;link2&lt;/a&gt; - Official guide&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://towardsdatascience.com/installing-multiple-cuda-cudnn-versions-in-ubuntu-fcb6aa5194e2&#34;&gt;link3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;since-i-dont-have-time-to-write-too-much-ill-try-to-make-things-brief&#34;&gt;Since I don&amp;rsquo;t have time to write too much, I&amp;rsquo;ll try to make things brief.&lt;/h6&gt;
&lt;h1 id=&#34;tldr&#34;&gt;TL;DR&lt;/h1&gt;
&lt;h2 id=&#34;1-purge-previous-installations&#34;&gt;1. Purge previous installations&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;## Purge previous installations
$ sudo apt-get --purge remove &amp;quot;*cublas*&amp;quot; &amp;quot;cuda*&amp;quot; &amp;quot;nsight*&amp;quot;
$ sudo apt-get --purge remove &amp;quot;*nvidia*&amp;quot;
$ sudo rf -rf /usr/local/cuda*  ## source files
$ sudo vim /etc/apt/sources.list  ## Fix repo: remove all entries with referece to &amp;quot;nvidia&amp;quot;
$ sudo apt-get update
$ sudo apt autoremove
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo apt-key list
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Removed two GPG keys:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/etc/apt/trusted.gpg
--------------------
pub   rsa4096 2017-09-28 [SCE]
      C95B 321B 61E8 8C18 09C4  F759 DDCA E044 F796 ECB0
uid           [ unknown] NVIDIA CORPORATION (Open Source Projects) &amp;lt;cudatools@nvidia.com&amp;gt;

pub   rsa4096 2016-06-24 [SC]
      AE09 FE4B BD22 3A84 B2CC  FCE3 F60F 4B3D 7FA2 AF80
uid           [ unknown] cudatools &amp;lt;cudatools@nvidia.com&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo apt-key del &amp;quot;C95B 321B 61E8 8C18 09C4  F759 DDCA E044 F796 ECB0&amp;quot;
OK
$ sudo apt-key del &amp;quot;AE09 FE4B BD22 3A84 B2CC  FCE3 F60F 4B3D 7FA2 AF80&amp;quot;
OK
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2-install-nvidia-driver&#34;&gt;2. Install NVIDIA driver&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.nvidia.com/download/index.aspx?lang=en-us&#34;&gt;Download page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To choose driver version, keep one rule in mind:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is only one requirement, that one needs to satisfy in order to install multiple CUDA on the same machine. You need to have latest Nvidia driver that is required by the highest CUDA that you’re going to install. Usually it is a good idea to install precise driver that was used during the build of CUDA.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Since my driver is installed via runfile, the purge steps above will also remove my driver. I need to install it back.&lt;/p&gt;
&lt;p&gt;Download the driver &lt;a href=&#34;https://www.nvidia.com/download/index.aspx?lang=en-us&#34;&gt;here&lt;/a&gt;, and execute the runfile:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo ./NVIDIA-Linux-x86_64_470.86.run
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;First time running the script received an error.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ERROR: Nouveau kernel driver is currently in use by your system. &amp;hellip; For some distributions, Nouveau can be disabled by adding a file in the modprobe configuration directory. Would you like nvidia-installer to attempt to create this modprobe file for you? (Answer: Yes)&lt;/p&gt;
&lt;p&gt;Note if you later wish to re-enable Nouveau, you will need to delete these files: /etc/modprobe.d/nvidia-installer-disable-nouveau.conf&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Disable the Nouveau and reboot the system.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ reboot
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After reboot there will be no GUI (because the graphics card&amp;rsquo;s driver has been disabled!).&lt;br&gt;
Logged in remotely via ssh to execute the &lt;code&gt;.run&lt;/code&gt; script:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo ./NVIDIA-Linux-x86_64_470.86.run
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Followed the installation instructions to get the driver back to work.&lt;br&gt;
Immediately after the installation succeeds, Ubuntu GUI shows up.&lt;/p&gt;
&lt;p&gt;Check driver configs:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ nvidia-smi
Thu Dec 16 16:32:13 2021       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 450.51.06    Driver Version: 450.51.06    CUDA Version: 11.0     |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|                               |                      |               MIG M. |
|===============================+======================+======================|
|   0  Quadro M4000        On   | 00000000:02:00.0  On |                  N/A |
| 53%   55C    P8    15W / 120W |    514MiB /  8125MiB |      8%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
                                                                               
+-----------------------------------------------------------------------------+
| Processes:                                                                  |
|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |
|        ID   ID                                                   Usage      |
|=============================================================================|
|    0   N/A  N/A      2126      G   /usr/lib/xorg/Xorg                187MiB |
|    0   N/A  N/A      2545      G   /usr/bin/gnome-shell              203MiB |
|    0   N/A  N/A      7112      G   /usr/lib/rstudio/bin/rstudio       97MiB |
|    0   N/A  N/A     12153      G   /usr/lib/firefox/firefox            2MiB |
|    0   N/A  N/A     19111      G   /usr/lib/firefox/firefox            2MiB |
|    0   N/A  N/A     21047      G   /usr/lib/firefox/firefox            2MiB |
|    0   N/A  N/A     25663      G   /usr/lib/firefox/firefox            2MiB |
|    0   N/A  N/A     27497      G   /usr/lib/firefox/firefox            2MiB |
|    0   N/A  N/A     39185      G   /usr/lib/firefox/firefox            2MiB |
+-----------------------------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;3-install-the-cuda-stack&#34;&gt;3. Install the &amp;ldquo;CUDA stack&amp;rdquo;&lt;/h2&gt;
&lt;p&gt;What&amp;rsquo;s in the &amp;ldquo;CUDA stack&amp;rdquo; (as of 2021.12.17)?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CUDA&lt;/li&gt;
&lt;li&gt;cuDNN&lt;/li&gt;
&lt;li&gt;CUPTI&lt;/li&gt;
&lt;li&gt;TensorRT (optional)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;According to &lt;a href=&#34;https://blog.kovalevskyi.com/multiple-version-of-cuda-libraries-on-the-same-machine-b9502d50ae77&#34;&gt;kovalevskyi&amp;rsquo;s guide&lt;/a&gt;, &lt;strong&gt;use CUDA &lt;code&gt;runfile (local)&lt;/code&gt; installers&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I would strongly recommend use the installer script. First of all, it is agnostic to the version of the Linux that is used. Secondly, unlike some binary pre-build packages like deb file you can control where exactly CUDA library files will be installed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &amp;ldquo;CUDA stack&amp;rdquo; compatibility matrix can be checked &lt;a href=&#34;https://www.tensorflow.org/install/source#gpu&#34;&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;code&gt;cellassign&lt;/code&gt; requires &lt;code&gt;tensorflow &amp;gt;= 2.1.0&lt;/code&gt;.&lt;br&gt;
With some tests I decided to use &lt;code&gt;2.4.0&lt;/code&gt;. For &lt;code&gt;tensorflow==2.4.0&lt;/code&gt; I need &lt;code&gt;CUDA 11.0&lt;/code&gt; and &lt;code&gt;cuDNN 8.0&lt;/code&gt;.&lt;br&gt;
&lt;code&gt;Cell_BLAST&lt;/code&gt; requires &lt;code&gt;tensorflow == 1.12.0&lt;/code&gt; which depends on &lt;code&gt;CUDA 9.0&lt;/code&gt; and &lt;code&gt;cuDNN 7&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Download the CUDA Toolkit installers &lt;a href=&#34;https://developer.nvidia.com/cuda-toolkit-archive&#34;&gt;here&lt;/a&gt;.
Read the &lt;strong&gt;&amp;ldquo;Versioned Online Documentation&amp;rdquo;&lt;/strong&gt;, for example &lt;a href=&#34;https://docs.nvidia.com/cuda/archive/11.0/&#34;&gt;this one&lt;/a&gt;, to understand what&amp;rsquo;s going on.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pre-installation actions&lt;/strong&gt;:
Not mandatory. Just make sure they&amp;rsquo;ll pass.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ lspci | grep -i nvidia  ## Verify a CUDA-capable GPU is available
$ uname -m &amp;amp;&amp;amp; cat /etc/*release  ## Verify Linux Version Support
$ gcc --version  ## Verify that gcc is installed
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;31-cuda-110--cudnn-804-for-cellassign&#34;&gt;3.1 CUDA-11.0 &amp;amp; cuDNN-8.0.4 for cellassign&lt;/h3&gt;
&lt;p&gt;Download &lt;strong&gt;the &lt;code&gt;.run&lt;/code&gt; file&lt;/strong&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ wget http://developer.download.nvidia.com/compute/cuda/11.0.2/local_installers/cuda_11.0.2_450.51.05_linux.run
$ chmod u+x cuda_11.0.2_450.51.05_linux.run
$ sudo ./cuda_11.0.2_450.51.05_linux.run --silent --toolkit --tookitpath=/usr/local/cuda-11.0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What are these flags doing? Quoting &lt;a href=&#34;https://blog.kovalevskyi.com/multiple-version-of-cuda-libraries-on-the-same-machine-b9502d50ae77&#34;&gt;Kovalevskyi&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;--silent&lt;/code&gt; — this will force installer to do everything in a silent mode without any interactive prompt. Really useful for the automation&lt;br&gt;
&lt;code&gt;--toolkit&lt;/code&gt; — install only the toolkit, majority of users probably indeed need only toolkit&lt;br&gt;
&lt;code&gt;--toolkitpath&lt;/code&gt; — this is where all the magic starts, each cuda that we’re going to install needs to be installed in its own separate folder, in our example CUDA9 is installed in /usr/local/cuda-9.0, therefore CUDA8 will be installed in /usr/local/cuda-8, CUDA9.1 can go to /usr/local/cuda-9.1 , etc&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Create an NVIDIA account and download the cuDNN installers &lt;a href=&#34;https://developer.nvidia.cn/rdp/cudnn-archive&#34;&gt;here&lt;/a&gt;. &lt;strong&gt;Use &lt;code&gt;.tgz&lt;/code&gt; file.&lt;/strong&gt;
For cuDNN, here are the &lt;strong&gt;installation guide&lt;/strong&gt; for the &lt;a href=&#34;https://docs.nvidia.com/deeplearning/cudnn/index.html&#34;&gt;latest release&lt;/a&gt; or &lt;a href=&#34;https://docs.nvidia.com/deeplearning/cudnn/archives/index.html&#34;&gt;archived relases&lt;/a&gt;. But we need to make a little hack.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ tar -xzvf cudnn-11.0-linux-x64-v8.0.4.30.tgz
## Some hacks
$ sudo cp cuda/include/cudnn*.h /usr/local/cuda-11.0/include
$ sudo cp cuda/lib64/libcudnn* /usr/local/cuda-11.0/lib64
$ sudo chmod a+r /usr/local/cuda-11.0/include/cudnn*.h /usr/local/cuda-11.0/lib64/libcudnn*
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;32-cuda-90--cudnn-765-for-cellblast&#34;&gt;3.2 CUDA-9.0 &amp;amp; cuDNN-7.6.5 for cellblast&lt;/h3&gt;
&lt;p&gt;Repeat the steps above to install &lt;code&gt;CUDA-9.0&lt;/code&gt; &amp;amp; &lt;code&gt;cuDNN-7.6.5&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;CUDA 9.0&lt;/code&gt;, gcc must be downgraded to &lt;code&gt;gcc-4.8&lt;/code&gt; in order to compile during cuda runfile install. Do:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ gcc -v
...
gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)
$ sudo apt-get install gcc-4.8
$ sudo update-alternatives --remove-all gcc
$ sudo apt-get install gcc
$ gcc -v
...
gcc version 4.8.5 (Ubuntu 4.8.5-4ubuntu8)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Install &lt;code&gt;CUDA-9.0&lt;/code&gt; from runfile:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ chmod u+x cuda_9.0.176_384.81_linux.run
$ sudo ./cuda_9.0.176_384.81_linux.run --silent --toolkit --toolkitpath=/usr/local/cuda-9.0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Install &lt;code&gt;cuDNN-7.6.5&lt;/code&gt; from &lt;code&gt;.tgz&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ tar -xvzf cudnn-10.1-linux-x64-v7.6.5.32.tgz
$ sudo cp cuda/include/cudnn.h /usr/local/cuda-9.0/include
$ sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64
$ sudo chmod a+r /usr/local/cuda-9.0/include/cudnn.h /usr/local/cuda-9.0/lib64/libcudnn*
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Get gcc 7.5.0 back (&lt;a href=&#34;https://linuxize.com/post/how-to-install-gcc-compiler-on-ubuntu-18-04/#installing-multiple-gcc-versions&#34;&gt;ref&lt;/a&gt;):&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 50
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;According to the TensorRT &lt;a href=&#34;https://docs.nvidia.com/deeplearning/tensorrt/archives/tensorrt-601/tensorrt-support-matrix/index.html&#34;&gt;support matrix&lt;/a&gt;, there is currently no TensorRT support for &lt;code&gt;CUDA 11.0&lt;/code&gt; &amp;amp; &lt;code&gt;cuDNN 8.0.4&lt;/code&gt;. For &lt;code&gt;CUDA 9.0&lt;/code&gt; &amp;amp; &lt;code&gt;cuDNN 7.6.5&lt;/code&gt;, &lt;code&gt;TensorRT 6.0.1&lt;/code&gt; is available. However, TensorRT is optional, I haven&amp;rsquo;t figured out exactly how to make a clean installation, so skip it for now.&lt;/p&gt;
&lt;p&gt;For &lt;strong&gt;post-installation actions&lt;/strong&gt;, i.e. PATH, LD_LIBRARY_PATH variables, we will set them up in environment configuration step (sections below).&lt;/p&gt;
&lt;h3 id=&#34;33-fix-symlink&#34;&gt;3.3 Fix symlink&lt;/h3&gt;
&lt;p&gt;Make &lt;code&gt;/usr/local/cuda&lt;/code&gt; point to the folder holding the default cuda version, which in my case is &lt;code&gt;CUDA-11.0&lt;/code&gt;. This may be useful for other applications, for example &lt;code&gt;U-net&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo rm /usr/local/cuda
sudo ln -s /usr/local/cuda-11.0 /usr/local/cuda
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;4-setup-environment-and-install-tools&#34;&gt;4. Setup Environment and Install Tools&lt;/h2&gt;
&lt;p&gt;Build environments for &lt;code&gt;cellassign&lt;/code&gt; and &lt;code&gt;cellblast&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;41-cellassign&#34;&gt;4.1 cellassign&lt;/h3&gt;
&lt;p&gt;Create new environment:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ conda create -n cellassign python=3.7
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;setup-shell-scripts-for-cellassign-conda-environment&#34;&gt;Setup shell scripts for &lt;code&gt;cellassign&lt;/code&gt; conda environment&lt;/h4&gt;
&lt;p&gt;On activation of environment:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ mkdir -p ~/miniconda3/envs/cellassign/etc/conda/activate.d
$ touch ~/miniconda3/envs/cellassign/etc/conda/activate.d/activate.sh
$ vim ~/miniconda3/envs/cellassign/etc/conda/activate.d/activate.sh
$ chmod +x ~/miniconda3/envs/cellassign/etc/conda/activate.d/activate.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Put these into &lt;code&gt;activate.sh&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/sh
ORIGINAL_PATH=$PATH
export PATH=/usr/local/cuda-11.0/bin:$PATH
ORIGINAL_LD_LIBRARY_PATH=$LD_LIBRARY_PATH
export LD_LIBRARY_PATH=/usr/local/cuda-11.0/bin:/usr/local/cuda-11.0/lib64:/usr/local/cuda-11.0/extras/CUPTI/lib64:$LD_LIBRARY_PATH
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;On deactivation of environment:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ mkdir -p ~/miniconda3/envs/cellassign/etc/conda/deactivate.d
$ touch ~/miniconda3/envs/cellassign/etc/conda/deactivate.d/deactivate.sh
$ vim ~/miniconda3/envs/cellassign/etc/conda/deactivate.d/deactivate.sh
$ chmod +x ~/miniconda3/envs/cellassign/etc/conda/deactivate.d/deactivate.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Put these into &lt;code&gt;deactivate.sh&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/sh
export PATH=$ORIGINAL_PATH
unset ORIGINAL_PATH
export LD_LIBRARY_PATH=$ORIGINAL_LD_LIBRARY_PATH
unset ORIGINAL_LD_LIBRARY_PATH
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;install-cellassign&#34;&gt;Install cellassign&lt;/h4&gt;
&lt;p&gt;The install instructions on &lt;code&gt;cellassign&lt;/code&gt; &lt;a href=&#34;https://github.com/Irrationone/cellassign&#34;&gt;github page&lt;/a&gt; never worked. For a working build of &lt;code&gt;cellassign&lt;/code&gt;, check out these threads:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Irrationone/cellassign/issues/92&#34;&gt;link1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Irrationone/cellassign/issues/78#issuecomment-714901092&#34;&gt;link2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Irrationone/cellassign/issues/94&#34;&gt;link3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that the &lt;code&gt;tensorflow&lt;/code&gt; R package is &lt;strong&gt;NOT THE SAME&lt;/strong&gt; as the &lt;code&gt;tensorflow&lt;/code&gt; python package. Supposedly it acts as a surrogate which talks to the core &lt;code&gt;tensorflow&lt;/code&gt; python package. Both (the R and the python packages) are required in order for &lt;code&gt;cellassign&lt;/code&gt; to work.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;## In R
&amp;gt; # install.packages(&amp;quot;tensorflow&amp;quot;) ## DON&#39;T DO THIS!
&amp;gt; devtools::install_github(&amp;quot;rstudio/tensorflow@v2.4.0&amp;quot;)  ## DO THIS!!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Although I could use R &lt;code&gt;tensorflow&lt;/code&gt; to install the python package, I find it more convenient to install it directly into the conda environment from terminal.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;## In terminal
$ conda activate cellassign
$ pip install --upgrade pip
$ pip install tensorflow==2.4.0
$ pip install tensorflow-gpu==2.4.0  ## Optional for cellassign
$ pip install tensorflow-probability==0.12.0  ## Required!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Install &lt;code&gt;cellassign&lt;/code&gt; R package.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;## In R
&amp;gt; reticulate::use_condaenv(&amp;quot;cellassign&amp;quot;)
&amp;gt; tensorflow::tf_config()  ## Test installation
2021-12-02 14:24:33.313201: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcudart.so.11.0
Loaded Tensorflow version 2.4.0
TensorFlow v2.4.0 (~/miniconda3/envs/cellassign/lib/python3.7/site-packages/tensorflow)
Python v3.7 (~/miniconda3/envs/cellassign/bin/python)
&amp;gt;
&amp;gt; devtools::install_github(&amp;quot;Irrationone/cellassign&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;42-cell-blast&#34;&gt;4.2 Cell-BLAST&lt;/h3&gt;
&lt;p&gt;Create new environment:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ conda create -n cellblast python=3.6
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;setup-shell-scripts-for-cellblast-conda-environment&#34;&gt;Setup shell scripts for &lt;code&gt;cellblast&lt;/code&gt; conda environment&lt;/h4&gt;
&lt;p&gt;Do the same for &lt;code&gt;cellblast&lt;/code&gt; environment. On activation:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ mkdir -p ~/miniconda3/envs/cellblast/etc/conda/activate.d
$ touch ~/miniconda3/envs/cellblast/etc/conda/activate.d/activate.sh
$ vim ~/miniconda3/envs/cellblast/etc/conda/activate.d/activate.sh
$ chmod +x ~/miniconda3/envs/cellblast/etc/conda/activate.d/activate.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Put in &lt;code&gt;activate.sh&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/sh
ORIGINAL_PATH=$PATH
export PATH=/usr/local/cuda-9.0/bin:$PATH
ORIGINAL_LD_LIBRARY_PATH=$LD_LIBRARY_PATH
export LD_LIBRARY_PATH=/usr/local/cuda-9.0/bin:/usr/local/cuda-9.0/lib64:/usr/local/cuda-9.0/extras/CUPTI/lib64:$LD_LIBRARY_PATH
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;On deactivation:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ mkdir -p ~/miniconda3/envs/cellblast/etc/conda/deactivate.d
$ touch ~/miniconda3/envs/cellblast/etc/conda/deactivate.d/deactivate.sh
$ vim ~/miniconda3/envs/cellblast/etc/conda/deactivate.d/deactivate.sh
$ chmod +x ~/miniconda3/envs/cellblast/etc/conda/deactivate.d/deactivate.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Put in &lt;code&gt;deactivate.sh&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/sh
export PATH=$ORIGINAL_PATH
unset ORIGINAL_PATH
export LD_LIBRARY_PATH=$ORIGINAL_LD_LIBRARY_PATH
unset ORIGINAL_LD_LIBRARY_PATH
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;install-cell-blast&#34;&gt;Install Cell-BLAST&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ pip install tensorflow-gpu==1.12  ## GPU &amp;amp; CPU
$ pip install tensorflow==1.12  ## CPU only
$ pip install Cell-BLAST
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Check that installation succeeds:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ python
&amp;gt; import tensorflow as tf
&amp;gt; tf.test.is_gpu_available()
...
True
&amp;gt; import Cell_BLAST as cb
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;miscellaneous&#34;&gt;Miscellaneous&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;The paragraph below was written at an very early stage, but later on I find them to be too verbose&amp;hellip; I&amp;rsquo;ve put them here anyway just so they&amp;rsquo;re not wasted.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To build multiple Tensorflow versions, there will be various compatibilities requirements. Consider the followings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tool of interest&lt;br&gt;
What tool will be tensorflow used for? What version of tensorflow does it depends on? These are the first things you should consider.&lt;br&gt;
Unless using tensorflow for standalone purposes, you will have to choose a tensorflow version that is compatible with your tool. Many tools are written with legacy (older) versions of tensorflow, and they may not run properly with newer versions. Make sure to install the appropriate one. For example in my case, &lt;code&gt;cellassign&lt;/code&gt; requires &lt;code&gt;tensorflow &amp;gt;= 2.1.0&lt;/code&gt;, whereas &lt;code&gt;Cell_BLAST&lt;/code&gt; requires &lt;code&gt;tensorflow == 1.12.0&lt;/code&gt;. These belong to two different MAJOR versions of tensorflow: &lt;code&gt;1.x.x&lt;/code&gt; and &lt;code&gt;2.x.x&lt;/code&gt;. Tensorflow MAJOR versions are quite different and are usually &lt;strong&gt;NOT&lt;/strong&gt; interchangable.&lt;br&gt;
If using tensorflow-gpu, there is also different dependencies on CUDA and cuDNN which you have to be aware about (see below).&lt;/li&gt;
&lt;li&gt;Tensorflow&lt;br&gt;
Like I said above, tensorflow &lt;code&gt;MAJOR&lt;/code&gt; versions can have a big difference. &lt;strong&gt;Remember to build dedicated environments&lt;/strong&gt; for &lt;strong&gt;each tool&lt;/strong&gt; with the required Tensorflow inside it. In my case, I created two environments, one with &lt;code&gt;Tensorflow&amp;gt;=2.1.0&lt;/code&gt; and &lt;code&gt;cellassign&lt;/code&gt; installed, and the other with &lt;code&gt;Tensorflow==1.12.0&lt;/code&gt; and &lt;code&gt;Cell_BLAST&lt;/code&gt; installed.&lt;br&gt;
For tensorflow-gpu, the decision of whether or not to install it depends on the tool you&amp;rsquo;ll be using and on whether you think your task requires parallel computing. CPU can run properly with any task, but if the task is computationally expensive, you may want to try GPU versions of tensorflow.&lt;/li&gt;
&lt;li&gt;GCC&lt;br&gt;
GCC is used for &lt;code&gt;make&lt;/code&gt; build some package dependencies during tensorflow installations. I did not run into any issue with gcc on my machine. In the installation procedures, there&amp;rsquo;s a step that explicitly checks gcc version. If you find a gcc trouble, just upgrade it and you&amp;rsquo;ll be fine.&lt;/li&gt;
&lt;li&gt;Ubuntu&lt;br&gt;
16.04? 18.04? or others? For some older versions of tensorflow, NVIDIA download page may not provide download links for the latest Ubuntu releases. But don&amp;rsquo;t worry. I find that the Ubuntu release version doesn&amp;rsquo;t have to be strictly followed. For example, for &lt;code&gt;tensorflow == 1.12.0&lt;/code&gt; I had to install CUDA 9.0 over 18.04, but there&amp;rsquo;s no CUDA 9.0 release for a 18.04 system, so I made an arbitrary choice: Download CUDA 9.0 for Ubuntu 16.04 and install it on 18.04. By now there seem to be no obvious issue. So don&amp;rsquo;t be too prudent about this and experiment yourself!&lt;/li&gt;
&lt;li&gt;CUDA &amp;amp; cuDNN&lt;br&gt;
The compatibilities between CUDA and cuDNN, as well as Tensorflow, python and gcc can be found &lt;a href=&#34;https://www.tensorflow.org/install/source#gpu&#34;&gt;here&lt;/a&gt;. If you use different versions of Tensorflow on the same machine, like above for &lt;code&gt;cellassign&lt;/code&gt; and &lt;code&gt;Cell BLAST&lt;/code&gt;, you&amp;rsquo;ll have to make multiple CUDA &amp;amp; cuDNN builts. For example, I&amp;rsquo;ve built on my machine &lt;code&gt;CUDA 9.0 &amp;amp; cuDNN 7.3.1&lt;/code&gt; for &lt;code&gt;Cell BLAST&lt;/code&gt; with &lt;code&gt;Tensorflow==1.12.0&lt;/code&gt;, and &lt;code&gt;CUDA 11.0 &amp;amp; cuDNN 8.0.4&lt;/code&gt; for &lt;code&gt;cellassign&lt;/code&gt; with &lt;code&gt;Tensorflow==2.4.0&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
- /post/build-tensorflow/ - </description>
        </item>
    
    
    
        <item>
        <title>R：同时部署多版本 &amp; 版本切换</title>
        <link>/post/mult-r/</link>
        <pubDate>Thu, 02 Dec 2021 19:54:09 +0800</pubDate>
        
        <guid>/post/mult-r/</guid>
        <description>Karmotrine Dream /post/mult-r/ -&lt;h1 id=&#34;clean-built-of-multiple-r-versions-on-ubuntu&#34;&gt;Clean Built of Multiple R Versions on Ubuntu&lt;/h1&gt;
&lt;p&gt;Long time ago I built R-4.0.3 on Ubuntu system following these guides: &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-install-r-on-ubuntu-18-04-quickstart&#34;&gt;link1&lt;/a&gt;, &lt;a href=&#34;https://cran.r-project.org/bin/linux/ubuntu/&#34;&gt;link2&lt;/a&gt;. Briefly, I added GPG Key to APT (Advanced Package Tool) and added &lt;code&gt;CRAN&lt;/code&gt; repository and directly retrieved R by &lt;code&gt;apt&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9
$ sudo add-apt-repository &#39;deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran40/&#39;
$ sudo apt update
$ sudo apt install r-base
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Recently, I ran into an issue with &lt;a href=&#34;https://github.com/Irrationone/cellassign&#34;&gt;&lt;code&gt;cellassign&lt;/code&gt;&lt;/a&gt; when analyzing single cell datasets. I suspected that reverting to previous R versions might &lt;a href=&#34;https://github.com/Irrationone/cellassign/issues/92&#34;&gt;resolve the problem&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Plus, the GPG key added earlier is raising errors everytime I invoke &lt;code&gt;sudo apt update&lt;/code&gt;, which is quite annoying. So I figured it might be better to build R from source.&lt;/p&gt;
&lt;h2 id=&#34;uninstall-previously-built-r-versions&#34;&gt;Uninstall previously built R versions&lt;/h2&gt;
&lt;p&gt;First check GPG Keys added by previous R built and remove it.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo apt-key list
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pub   rsa4096 2019-06-11 [SC]
      4A0C 1931 1880 3EB4 A561  E569 B3CF 35C3 15B5 5A9F
uid           [ unknown] Launchpad PPA for cran

/etc/apt/trusted.gpg.d/ubuntu-keyring-2012-archive.gpg
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo apt-key del &amp;quot;4A0C 1931 1880 3EB4 A561  E569 B3CF 35C3 15B5 5A9F&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then remove &lt;code&gt;cran&lt;/code&gt; repository from &lt;code&gt;apt&lt;/code&gt; repository list:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo vim /etc/apt/sources.list  # Manually edit, remove entries related to R or cran
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Before uninstalling R, we might want to check what packages are currently installed and back them up, in case they&amp;rsquo;ll be needed later.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ R
R version 4.0.3 (2020-10-10) -- &amp;quot;Bunny-Wunnies Freak Out&amp;quot;
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

&amp;gt; .libPaths()
[1] &amp;quot;/home/luolab/R/x86_64-pc-linux-gnu-library/4.0&amp;quot;
[2] &amp;quot;/usr/local/lib/R/site-library&amp;quot;
[3] &amp;quot;/usr/lib/R/site-library&amp;quot; # This one is empty
[4] &amp;quot;/usr/lib/R/library&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In shell, backup the content listed in these paths.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cp -r /home/luolab/R/x86_64-pc-linux-gnu-library/ /media/luolab/4A9623FA9623E563/R_bak/home.luolab.R.x86_64-pc-linux-gnu-library  # Moving to 120G SSD
$ cp -r /usr/local/lib/R/site-library/ /media/luolab/4A9623FA9623E563/R_bak/usr.local.lib.R.site-library
$ cp -r /usr/lib/R/library/ /media/luolab/4A9623FA9623E563/R_bak/usr.lib.R.library
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now actually uninstall R. In shell, do:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo apt-get --purge remove r-base-core
$ sudo apt-get autoremove
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Make sure R is properly removed:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ R

Command &#39;R&#39; not found, but can be installed with:

sudo apt install r-base-core
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;install-r-from-precompiled-binaries&#34;&gt;Install R from precompiled binaries&lt;/h2&gt;
&lt;p&gt;I will use the method listed in this page for installation of R:
&lt;a href=&#34;https://docs.rstudio.com/resources/install-r/&#34;&gt;&lt;strong&gt;Install R&lt;/strong&gt;&lt;/a&gt;*&lt;/p&gt;
&lt;p&gt;As a prerequisite, enable additional repositories for third-party or source packages:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo apt-get update
$ sudo apt-get install gdebi-core
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Specify R version.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;export R_VERSION=4.0.5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Download and install the desired version of R.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;curl -O https://cdn.rstudio.com/r/ubuntu-1804/pkgs/r-${R_VERSION}_1_amd64.deb
sudo gdebi r-${R_VERSION}_1_amd64.deb
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Verify R installation:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/opt/R/${R_VERSION}/bin/R --version
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To ensure that R is available on the default system &lt;code&gt;PATH&lt;/code&gt; variable, create symbolic links to the version of R just installed.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo ln -s /opt/R/${R_VERSION}/bin/R /usr/local/bin/R
sudo ln -s /opt/R/${R_VERSION}/bin/Rscript /usr/local/bin/Rscript
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, time to install multiple versions of R. Repeat the above steps to specify, download, and install a different version of R alongside existing versions.
I re-configured with &lt;code&gt;export R_VERSION=3.6.2&lt;/code&gt; and executed the steps above to have R-3.6.2 installed.&lt;/p&gt;
&lt;h2 id=&#34;switching-between-r-versions&#34;&gt;Switching between R versions&lt;/h2&gt;
&lt;h3 id=&#34;method-1&#34;&gt;Method 1&lt;/h3&gt;
&lt;p&gt;The tutorial has a note at the symlink step, saying:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This step only applies to the first installation of R on a given system. For subsequent installations, this section should be skipped.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I suspect that overriding the symlink with later installed R versions would allow switching between different R versions. So I did:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ export R_VERSION=3.6.2
$ sudo rm /usr/local/bin/R /usr/local/bin/Rscript
$ sudo ln -s /opt/R/${R_VERSION}/bin/R /usr/local/bin/R  # ${R_VERSION}=3.6.2
$ sudo ln -s /opt/R/${R_VERSION}/bin/Rscript /usr/local/bin/Rscript
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After doing this, R indeed switched to 3.6.2, which is my desired version.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ which R
/usr/local/bin/R
$ file /usr/local/bin/R
/usr/local/bin/R: symbolic link to /opt/R/3.6.2/bin/R
$ R --version
R version 3.6.2 (2020-02-29) -- &amp;quot;Holding the Windsock&amp;quot;
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;method-2&#34;&gt;Method 2&lt;/h3&gt;
&lt;p&gt;Another way of switching between different R versions is to get &lt;code&gt;Rstudio&lt;/code&gt; recognize different R executables.
Referring to this post: &lt;a href=&#34;https://support.rstudio.com/hc/en-us/articles/200486138-Changing-R-versions-for-the-RStudio-Desktop-IDE&#34;&gt;Changing R versions for the RStudio Desktop IDE&lt;/a&gt;, we know that on Linux systems, &lt;code&gt;Rstudio&lt;/code&gt; use the version of R pointed to by the output of &lt;code&gt;which R&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To override which version of R is used, we set &lt;code&gt;RSTUDIO_WHICH_R&lt;/code&gt; environment variable to the R executable that we want to run against. For example, in terminal:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ export RSTUDIO_WHICH_R=/opt/R/3.6.2/bin/R
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And within the same terminal, launch Rstudio by typing:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ rstudio
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Because the &lt;code&gt;RSTUDIO_WHICH_R&lt;/code&gt; is a temporary variable, it is only available in the activated shell instance. Calling &lt;code&gt;rstudio&lt;/code&gt; in a new terminal will still point to the default R executable, which in our case is &lt;code&gt;/usr/local/bin/R&lt;/code&gt;, which ,by default, points to &lt;code&gt;/opt/R/4.0.5/bin/R&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now that we can work with multiple R versions, it&amp;rsquo;s time to build some R packages. Hopefully &lt;code&gt;cellassign&lt;/code&gt; can be run properly this time.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cellassign&lt;/code&gt; depends on tensorflow which is another nasty built experience. I&amp;rsquo;ll write about it next time.&lt;/p&gt;
&lt;h2 id=&#34;2021123-updates&#34;&gt;2021.12.3 Updates:&lt;/h2&gt;
&lt;p&gt;Previously in this post I installed R-3.6.3. Now I strongly discourage this practice. For configuration of &lt;code&gt;cellassign&lt;/code&gt;, build &lt;code&gt;R-3.6.2&lt;/code&gt; instead of &lt;code&gt;R-3.6.3&lt;/code&gt;, because some of the package dependencies (&lt;code&gt;RcppAnnoy&lt;/code&gt;) has &lt;a href=&#34;https://github.com/LTLA/BiocNeighbors/issues/17&#34;&gt;bad compatibility with &lt;code&gt;R-3.6.3&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It turns out that &lt;code&gt;cellassign&lt;/code&gt; still fails after reverting to R-3.6.3!&lt;/p&gt;
&lt;p&gt;The error encountered with &lt;code&gt;cellassign&lt;/code&gt; turns out to be a compatibility issue of R &lt;code&gt;tensorflow&lt;/code&gt;. To avoid the error, build R &lt;code&gt;tensorflow&lt;/code&gt; with &lt;code&gt;devtools&lt;/code&gt; and explicitly specify a version. See this &lt;a href=&#34;https://github.com/Irrationone/cellassign/issues/94&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References:&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.rstudio.com/resources/install-r/&#34;&gt;&lt;strong&gt;Install R&lt;/strong&gt;&lt;/a&gt;*&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://support.rstudio.com/hc/en-us/articles/215488098-Installing-multiple-versions-of-R-on-Linux&#34;&gt;&lt;strong&gt;Installing multiple versions of R on Linux&lt;/strong&gt;&lt;/a&gt;*&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/doc/manuals/r-release/R-admin.html&#34;&gt;R Installation and Administration&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://support.rstudio.com/hc/en-us/articles/212364537-Using-multiple-versions-of-R-with-RStudio-Workbench-RStudio-Server-Pro&#34;&gt;Using multiple versions of R with RStudio Workbench / RStudio Server Pro&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.rstudio.com/rspm/admin/appendix/system-dependency-detection/&#34;&gt;System Dependency Detection&lt;/a&gt;&lt;/p&gt;
- /post/mult-r/ - </description>
        </item>
    
    
    
        <item>
        <title>生物信息学&amp;计算生物学 常用装机软件汇总整理</title>
        <link>/post/frq-used/</link>
        <pubDate>Thu, 02 Dec 2021 17:41:03 +0800</pubDate>
        
        <guid>/post/frq-used/</guid>
        <description>Karmotrine Dream /post/frq-used/ -&lt;p&gt;（未完成，持续更新）&lt;/p&gt;
&lt;p&gt;Softwares used in works. Some require built from scratch.&lt;/p&gt;
&lt;h2 id=&#34;mac-ios&#34;&gt;Mac (iOS)&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;bash tools
&lt;ul&gt;
&lt;li&gt;brew&lt;/li&gt;
&lt;li&gt;tree&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;softwares
&lt;ul&gt;
&lt;li&gt;R&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;ubuntu&#34;&gt;Ubuntu&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Bioinformatics
&lt;ul&gt;
&lt;li&gt;samtools&lt;/li&gt;
&lt;li&gt;STAR&lt;/li&gt;
&lt;li&gt;umi_tools&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;single-cell-biology&#34;&gt;Single cell biology&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;R
&lt;ul&gt;
&lt;li&gt;Seurat&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;python
&lt;ul&gt;
&lt;li&gt;geosketch&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
- /post/frq-used/ - </description>
        </item>
    
    
    
        <item>
        <title>咋地，你也想整点计算生物学玩玩？</title>
        <link>/post/on-comp-bio/</link>
        <pubDate>Thu, 02 Dec 2021 16:49:27 +0800</pubDate>
        
        <guid>/post/on-comp-bio/</guid>
        <description>Karmotrine Dream /post/on-comp-bio/ -&lt;p&gt;Nick Loman和Mick Watson在2013年写了一篇小短文发在NBT上，题为&lt;em&gt;So you want to be a computational biologist?&lt;/em&gt;&lt;br&gt;
读后觉得受益颇多，忍不住写几句“读后感”。&lt;/p&gt;
&lt;p&gt;几句题外话：Nick Loman 79年生人，年轻时曾与其兄弟Rupert Loman一同沉迷电子游戏，后来二人发现打游戏不如靠游戏赚钱，遂合伙创立了Eurogamer Network，后者逐渐发展为欧洲最大的电子媒体之一Gamer Network。&lt;br&gt;
2004年，Nick老弟浪子回头（？），在大学阶段闯入生命医学领域，开始了长达8年的本硕博学习生涯，随后科研做得风生水起。2018年，Gamer Network被出版巨头Reed收购。&lt;/p&gt;
&lt;p&gt;Recently I ran into this wonderful &lt;a href=&#34;https://doi.org/10.1038/nbt.2740&#34;&gt;article&lt;/a&gt; published in Nature Biotechnology written by Nick Loman and Mick Watson, about how to become a computational biologist. The article is so brilliant and I thought I should dedicate my (actual) first post to write about it.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;understand-your-goals-and-choose-appropriate-methods&#34;&gt;Understand your goals and choose appropriate methods&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Key to good computational biology is the selection and use of appropriate software. Before you can usefully interpret the output of a piece of software, you must understand what the software is doing. &amp;hellip; Understanding the underlying methods and algorithms gives you the tools to interpret the results. That doesn’t mean you need to read through each line of source code, but you should have a grasp of the concepts.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There is always more tools to choose from than we can actually use. Choose tools wisely. Define your work with words accurately and search carefully. Use well-maintained tools. Use tools with higher user base. High popularity of a tool usually indicates good maintenance. If you decide to use a less popular tool, know the risk: you may experience more bugs or even criticisms during publication.&lt;/p&gt;
&lt;p&gt;Understand what the tool is doing, but don&amp;rsquo;t dive into the technical details too early. Having a good grasp of what the inputs and outputs are is usually enough for doing the job.&lt;/p&gt;
&lt;p&gt;Critically, one must also have a good understanding of the biological question at hand. No tool fits all problems. Under different scenarios, one may have to look for different tools to solve the problem.&lt;/p&gt;
&lt;p&gt;At a more advanced level,&lt;/p&gt;
&lt;h3 id=&#34;set-traps-for-your-own-scripts-and-other-peoples&#34;&gt;Set traps for your own scripts and other people’s&lt;/h3&gt;
&lt;h3 id=&#34;youre-a-scientist-not-a-programmer&#34;&gt;You’re a scientist, not a programmer&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The perfect is the enemy of the good. Remember you are a scientist and the quality of your research is what is important, not how pretty your source code looks. Perfectly written, extensively documented, elegant code that gets the answer wrong is not as useful as a basic script that gets it right. Having said that, once you’re sure your core algorithm works, spend time making it elegant and documenting how to use it. Use your biological knowledge as much as possible—that’s what makes you a computational biologist.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is, for me, THE most important take home message.&lt;/p&gt;
&lt;p&gt;The first rule of being a computational biologicst, is that you should make the center of your work biology.&lt;/p&gt;
&lt;p&gt;Although officially doing my phD in a wet lab, I&amp;rsquo;ve managed to train myself to become a &amp;ldquo;bioinformatics/computational biology&amp;rdquo; practitioner (thanks to the patience and resources put in by Minmin).
Working my way over the years, I find that I&amp;rsquo;ve been unconsciously forming a work-style that exactly matches the one described in Nick &amp;amp; Mick&amp;rsquo;s article.&lt;/p&gt;
- /post/on-comp-bio/ - </description>
        </item>
    
    
    
        <item>
        <title>Hugo blog，新主题，新开始</title>
        <link>/post/my-first-post/</link>
        <pubDate>Tue, 23 Nov 2021 19:59:57 +0800</pubDate>
        
        <guid>/post/my-first-post/</guid>
        <description>Karmotrine Dream /post/my-first-post/ -&lt;p&gt;2022-02-28更新：&lt;/p&gt;
&lt;p&gt;去年年底拿Hugo搭了一个博客，但用了没几日就没有动力再写了。我反思了一下可能主要有两个原因，总结一下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;长篇累牍使用英文撰写，逼格定调得太高。造成的后果是可读性差，效率又低。
今后还是老老实实用母语行文，必要时候可以加入洋文。&lt;/li&gt;
&lt;li&gt;选用的主题（hugo-theme-cleanwhite by Huabing）过于花里胡哨。
每次翻阅过去的记录都感觉头晕目眩，遂挑了一个简约的主题重新搭了博客。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;业精于勤而荒于嬉。今后还要再接再厉，也许做不到笔耕不辍，但至少也应该保持三天两头写点东西。&lt;/p&gt;
&lt;p&gt;这里就先记录下我是如何从hugo-theme-cleanwhite跳到新的主题Diary的。&lt;/p&gt;
&lt;p&gt;新主题Diary地址：(&lt;a href=&#34;https://themes.gohugo.io/themes/hugo-theme-diary/&#34;&gt;https://themes.gohugo.io/themes/hugo-theme-diary/&lt;/a&gt;)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;下面是具体步骤。&lt;/p&gt;
&lt;p&gt;如链接教程中的Quick Start所述，先用&lt;code&gt;git submodule&lt;/code&gt;把Repo部署到本地的&lt;code&gt;blog/themes&lt;/code&gt;目录下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd my_hugo_site/blog
git submodule add https://github.com/AmazingRise/hugo-theme-diary.git themes/diary
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下来可以跳过教程Quick Start中的步骤2、3。&lt;br&gt;
直接到&lt;code&gt;blog&lt;/code&gt;目录下，用&lt;a href=&#34;https://github.com/AmazingRise/hugo-theme-diary/blob/1.2.1/exampleSite/config.toml&#34;&gt;这个模板&lt;/a&gt;，替换&lt;code&gt;config.toml&lt;/code&gt;文件中的内容。&lt;/p&gt;
&lt;p&gt;由于最初将这个Hugo site部署到github时参考了&lt;a href=&#34;https://blog.csdn.net/kutawei/article/details/105421545&#34;&gt;这篇推文&lt;/a&gt;，需要对&lt;code&gt;config.toml&lt;/code&gt;进行修改，以满足本地的目录结构。&lt;/p&gt;
&lt;p&gt;修改了下面几个参数：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;baseURL = &amp;quot;/&amp;quot;
title = &amp;quot;Karmotrine Dream&amp;quot;
copyright = &amp;quot;&amp;quot;
theme = &amp;quot;diary&amp;quot;
subtitle = &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;添加下面这个参数，使&lt;code&gt;hugo -D&lt;/code&gt;命令生成的网页推到&lt;code&gt;public/&lt;/code&gt;目录下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;publishDir = &amp;quot;../public&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;删除原来&lt;code&gt;public/&lt;/code&gt;目录中所有内容（这些是旧theme生成的文件）。&lt;/p&gt;
&lt;p&gt;最后，修改&lt;code&gt;deploy.sh&lt;/code&gt;中的命令，使用diary作为theme来生成新的site：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hugo -D -t diary # or `hugo -D` if no theme is specified
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And Voila!&lt;br&gt;
Hugo博客的theme变为Diary了！&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;最后写一下怎样在本地编辑、预览博客内容。&lt;/p&gt;
&lt;p&gt;首先&lt;code&gt;cd&lt;/code&gt;到&lt;code&gt;blog/&lt;/code&gt;目录下，用&lt;code&gt;hugo new&lt;/code&gt;建新的post文件：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd my_hugo_site/blog
hugo new content/post/[new-post-name].md
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在新的博客写好后，可用下面的指令在本地预览：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hugo server -D
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;若预览中发现错误，务必及时纠正。&lt;/p&gt;
&lt;p&gt;确保无误后，用&lt;code&gt;deploy.sh&lt;/code&gt;脚本推送到github上即可：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./deploy.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样就大功告成了！&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;(以下内容是旧时的博客，写于2021-11-23)&lt;/p&gt;
&lt;p&gt;Hosting my first Blog with Hugo on Github!&lt;/p&gt;
&lt;p&gt;For a starter, I&amp;rsquo;ll document in this post how the blog is managed and used.
I&amp;rsquo;ve setup the site by referring to &lt;a href=&#34;https://blog.csdn.net/kutawei/article/details/105421545&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://zhuanlan.zhihu.com/p/150095964&#34;&gt;here&lt;/a&gt;, and &lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first link is particularly useful. I&amp;rsquo;ve adopted its file structure for setting up privately managed (&lt;code&gt;/blog&lt;/code&gt;) and public sites (&lt;code&gt;/public&lt;/code&gt;).
Critically, the &lt;code&gt;/public&lt;/code&gt; repo must be created with the following convention: &lt;a href=&#34;https://github.com/RuiyuRayWang/ruiyuraywang.github.io&#34;&gt;https://github.com/RuiyuRayWang/ruiyuraywang.github.io&lt;/a&gt;
Everytime contents in &lt;code&gt;/blog&lt;/code&gt; is updated, run &lt;code&gt;hugo -D&lt;/code&gt; to generate new site to &lt;code&gt;/public&lt;/code&gt; and push &lt;code&gt;/public&lt;/code&gt; to github accordingly.&lt;/p&gt;
&lt;p&gt;For automatic regeneration of the static site, a shell script is given (&lt;code&gt;./deploy.h&lt;/code&gt;). After editing contents in &lt;code&gt;/blog&lt;/code&gt;, simply do&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./deploy.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and the static sites will be updated.&lt;/p&gt;
&lt;p&gt;To add new contents to the blog, open up a terminal and navigate to the &lt;code&gt;blog/&lt;/code&gt; directory and type:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hugo new content/post/[new-post-name].md
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The newly created markdown should assume a pre-defined format (headers, etc.). Edit the post contents and then set &lt;code&gt;draft&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;, the post will be updated marked and recognized the next time &lt;code&gt;hugo -D&lt;/code&gt; is invoked.&lt;/p&gt;
&lt;p&gt;Before pushing to github remote site, check locally how the update looks, do:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hugo server -D
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and the newly generated site can be viewed at &lt;code&gt;http://localhost:1313/&lt;/code&gt;&lt;/p&gt;
- /post/my-first-post/ - </description>
        </item>
    
    
  </channel>
</rss> 