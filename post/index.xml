<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Karmotrine Dream</title>
    <link>/post/</link>
    <description>Recent content in Posts on Karmotrine Dream</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 15 Jun 2022 20:52:38 +0800</lastBuildDate><atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Switch R Faster</title>
      <link>/post/switch-r-faster/</link>
      <pubDate>Wed, 15 Jun 2022 20:52:38 +0800</pubDate>
      
      <guid>/post/switch-r-faster/</guid>
      <description>Previously I wrote about how to build multiple R versions on Ubuntu and how to switch versions.
R：同时部署多版本 &amp;amp; 版本切换
It turns out that my &amp;ldquo;old school&amp;rdquo; move (ln -s) is outdated. Now there are many handy tools to do the job for you.
RSwitch is based on macOS. I&amp;rsquo;m using it personally, simply because I used it before and don&amp;rsquo;t want to bother changing gear.
rig supports multiple platforms and is probably the best choice for most users.</description>
    </item>
    
    <item>
      <title>The Bitter Lesson</title>
      <link>/post/the_bitter_lesson/</link>
      <pubDate>Fri, 27 May 2022 09:21:08 +0800</pubDate>
      
      <guid>/post/the_bitter_lesson/</guid>
      <description>Richard Sutton, the reknowned computer scientist, author of the AI bible: &amp;lsquo;Reinforcement Learning&amp;rsquo;, wrote this essay three years after Alphago beat Lee Sedol.
 http://www.incompleteideas.net/IncIdeas/BitterLesson.html
Here are some excerptions from the article:
 Most AI research has been conducted as if the computation available to the agent were constant (in which case leveraging human knowledge would be one of the only ways to improve performance) but, over a slightly longer time than a typical research project, massively more computation inevitably becomes available.</description>
    </item>
    
    <item>
      <title>多重比较与P值矫正(一)：FWER</title>
      <link>/post/p_correction_fdr/</link>
      <pubDate>Sun, 27 Feb 2022 22:57:36 +0800</pubDate>
      
      <guid>/post/p_correction_fdr/</guid>
      <description>随着高通量技术逐渐发展完善，现代生物学的组学实验已经可以实现同时测量成百上千甚至上万个变量（variables）。如一次转录组实验可以得到10000-20000个基因的转录本丰度，蛋白组实验可以得到几千个有效蛋白肽段的丰度，磷酸化蛋白组可以得到~10000个磷酸化位点的肽段丰度。一组实验中我们往往会设置至少两个条件，而</description>
    </item>
    
    <item>
      <title>Tidy Data</title>
      <link>/post/tidy_data/</link>
      <pubDate>Mon, 21 Feb 2022 18:56:53 +0800</pubDate>
      
      <guid>/post/tidy_data/</guid>
      <description>Hadley Wickham提出的Tidy Data的概念方兴未艾，如今无论是R还是Python都能见到Tidy的身影。Tidydata的思维方式，将来必定会越来越深入人心。
正如进入21世纪，计算机基本操作逐渐变为一项几乎必修的技能一样，将来十几年内，Tidydata对DataFrame的操作也一定会演变成一项必修技能。
如果要开一个计算生物学101的课程，&amp;ldquo;Tidy Data&amp;quot;这篇文章一定是必读清单的一篇文章。而且应该安排学生每学期花60个学时以上的时间上机实操锻炼Tidydata的操作。（我真是魔鬼）</description>
    </item>
    
    <item>
      <title>一图看懂单细胞文库Reads的组成成分</title>
      <link>/post/10x_reads_composition/</link>
      <pubDate>Sun, 20 Feb 2022 10:55:43 +0800</pubDate>
      
      <guid>/post/10x_reads_composition/</guid>
      <description>这篇文章是前两篇技术文档的后续：
 10X CellRanger 中测序饱和度的定义与计算（一） 10X CellRanger 中测序饱和度的定义与计算（二）  前两篇文章成文过程中我意识到，单细胞测序文库从Raw Data到Deduplicated Reads，其实是一个non-trivial的流程。从fastq文件下机开始，不同来源的Reads需经过层层计算和筛选，最终只有少部分Reads能保留在表达矩阵（或counts table）中。这里用一张图总结，以帮助我们更好地理解单细胞文库的建库和上游分析（Upstream Analysis）。
   以ScRNAseq_smkpipe_at_Luolab的分析pipeline为例。
这套流程主要针对使用了Barcode + UMI的技术。
流程图读法：从下往上读，不同颜色代表不同分析阶段的Reads；画斜条纹阴影的线段表示当前步骤到下一步中被清除掉的Reads。
 黑色：Total Input Reads，一般我用的是测序下机后的Clean Reads（公司给的QC质控后的Cleandata） 黑色-&amp;gt;紫色：umi_tools whitelist, wash_whitelist, umi_tools extract 黑色阴影：Reads with Non-correctable Reads, invalid Barcode &amp;amp; UMI (discarded) 紫色：Barcode有效的Reads（Reads with valid Barcode &amp;amp; UMI） 紫色-&amp;gt;黄色：STAR 紫色阴影：Reads NOT Unique Mapped to Genome (discarded) 黄色：Unique Mapped Reads，在10X中也叫Confidently Mapped Reads（Unique Mapped, valid Barcode &amp;amp; UMI Reads） 黄色-&amp;gt;绿色：featureCounts 黄色阴影：Unique Mapped, valid Barcode &amp;amp; UMI but NOT assigned to feature 绿色：Effective Reads，即Unique Mapped, valid Barcode &amp;amp; UMI, feature assigned Reads 绿色-&amp;gt;蓝色：umi_tools count 蓝色阴影：Reads Collapsed due to UMI deduplication 蓝色：Deduplicated Reads，即最终用于生成表达矩阵的对Reads计数的结果  有了这张图，我们可以做一个简单直观的推论：如果想提高单细胞测序的技术质量，则必须尽可能减少阴影部分的Reads在总文库中的比例。</description>
    </item>
    
    <item>
      <title>Hugo：启用Mathjax实现数学公式的编辑与显示</title>
      <link>/post/deploy_mathjax/</link>
      <pubDate>Sat, 12 Feb 2022 21:17:37 +0800</pubDate>
      
      <guid>/post/deploy_mathjax/</guid>
      <description>The HUGO official document has a nice blog about MathJax Support. Additionally, a blog written by Geoff Ruddock has a more concise solution: Render LaTeX math expressions in Hugo with MathJax 3.
TL;DR  Create a file in your theme directory layouts/partials/mathjax_support.html as the following:  &amp;lt;script&amp;gt; MathJax = { tex: { inlineMath: [[&#39;$&#39;, &#39;$&#39;], [&#39;\\(&#39;, &#39;\\)&#39;]], displayMath: [[&#39;$$&#39;,&#39;$$&#39;], [&#39;\\[&#39;, &#39;\\]&#39;]], processEscapes: true, processEnvironments: true }, options: { skipHtmlTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;] } }; window.</description>
    </item>
    
    <item>
      <title>10X CellRanger 中测序饱和度的定义与计算（一）</title>
      <link>/post/10x_calc_saturation_1/</link>
      <pubDate>Tue, 08 Feb 2022 22:05:51 +0800</pubDate>
      
      <guid>/post/10x_calc_saturation_1/</guid>
      <description>最近为了搭建单细胞测序上游分析的Pipeline，正在研究怎样对分析结果做质控（Pipeline详情移步https://github.com/RuiyuRayWang/ScRNAseq_smkpipe_at_Luolab）。参考了10X CellRanger官方网站中描述的对测序饱和度的定义和计算方法：
 10X 官方文档：什么是测序饱和度？ 10X 官方文档：测序饱和度怎样计算？  将用两篇文章记录这部分内容。
注意：本系列文章的参考来源均为10X官方公开的信息。
这篇文章是本系列文章的第一篇，将对相关概念和计算公式的定义进行解读。
 一、测序饱和度 和 文库复杂度 关于测序饱和度的定义，引用10X文档中的说明：
 Question: What is sequencing saturation?
Answer: Sequencing saturation is a measure of the fraction of library complexity that was sequenced in a given experiment. The inverse of the sequencing saturation can be interpreted as the number of additional reads it would take to detect a new transcript.
 这两句话言简而意赅，点明了测序饱和度(sequencing saturation)与文库复杂度(library complexity)之间的关系。
library complexity (文库复杂度)，指的是一个测序文库中非冗余的DNA片段的数量（the number of unique DNA fragments present in a given library）。</description>
    </item>
    
    <item>
      <title>10X CellRanger 中测序饱和度的定义与计算（二）</title>
      <link>/post/10x_calc_saturation_2/</link>
      <pubDate>Tue, 08 Feb 2022 22:05:51 +0800</pubDate>
      
      <guid>/post/10x_calc_saturation_2/</guid>
      <description>最近为了搭建单细胞测序上游分析的Pipeline，正在研究怎样对分析结果做质控（Pipeline详情移步https://github.com/RuiyuRayWang/ScRNAseq_smkpipe_at_Luolab）。参考了10X CellRanger官方网站中描述的对测序饱和度的定义和计算方法：
 10X 官方文档：什么是测序饱和度？ 10X 官方文档：测序饱和度怎样计算？  将用两篇文章记录这部分内容。
注意：本系列文章的参考来源均为10X官方公开的信息。
这篇文章是本系列文章的第二篇，将利用10X官方文档中的示例数据来展示测序饱和度计算的代码复现。
 下载数据：
 Uses dataset at https://support.10xgenomics.com/single-cell-gene-expression/datasets/3.0.0/pbmc_1k_v3, where the web summary report gives a sequencing saturation value of 0.7085123.​
 web_summary.html
 计算公式：
 The sequencing saturation calculation below matches the 0.7085123 sequencing saturation given in the web summary report.
 unique_confidently_mapped_reads = 10,196,940 duplicate_reads = 24,785,461 x = 1 - (unique_confidently_mapped_reads/(unique_confidently_mapped_reads + duplicate_reads)) x = 1 - (10,196,940/(10,196,940 + 24,785,461)) x = 1 - (10,196,940/34,982,401) x = 1 - 0.</description>
    </item>
    
    <item>
      <title>R SCENIC：安装与部署</title>
      <link>/post/install-r-scenic/</link>
      <pubDate>Wed, 22 Dec 2021 12:32:17 +0800</pubDate>
      
      <guid>/post/install-r-scenic/</guid>
      <description>TL;DR First consulted this page
I have R-4.0.5 with Bioconductor 3.12(4.0), use the latest scripts for installation.
In Rstudio:
&amp;gt; if (!requireNamespace(&amp;quot;BiocManager&amp;quot;, quietly = TRUE)) install.packages(&amp;quot;BiocManager&amp;quot;) &amp;gt; BiocManager::version() &amp;gt; # If your bioconductor version is previous to 4.0, see the section bellow &amp;gt; &amp;gt; ## Required &amp;gt; BiocManager::install(c(&amp;quot;AUCell&amp;quot;, &amp;quot;RcisTarget&amp;quot;)) &amp;gt; BiocManager::install(c(&amp;quot;GENIE3&amp;quot;)) # Optional. Can be replaced by GRNBoost &amp;gt; &amp;gt; ## Optional (but highly recommended): &amp;gt; # To score the network on cells (i.</description>
    </item>
    
    <item>
      <title>Working with pySCENIC</title>
      <link>/post/using-scenic/</link>
      <pubDate>Wed, 15 Dec 2021 23:07:11 +0800</pubDate>
      
      <guid>/post/using-scenic/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Tensorflow：多版本部署、系统配置与版本切换</title>
      <link>/post/build-tensorflow/</link>
      <pubDate>Sun, 05 Dec 2021 22:57:25 +0800</pubDate>
      
      <guid>/post/build-tensorflow/</guid>
      <description>Building Environments for Cellassign and CellBLAST with multiple Tensorflow (GPU) Versions on Ubuntu As promised, I will write about my experience with installing tensorflow.
Why did I ever have to build Tensorflow myself?
The reason is that I was trying to use two tools: cellassign and Cell_BLAST, but they depend on different tensorflow versions. To make them both work, I used the following build strategy that allows different Tensorflow versions installed and run in separate conda environments.</description>
    </item>
    
    <item>
      <title>R：同时部署多版本 &amp; 版本切换</title>
      <link>/post/mult-r/</link>
      <pubDate>Thu, 02 Dec 2021 19:54:09 +0800</pubDate>
      
      <guid>/post/mult-r/</guid>
      <description>Clean Built of Multiple R Versions on Ubuntu Long time ago I built R-4.0.3 on Ubuntu system following these guides: link1, link2. Briefly, I added GPG Key to APT (Advanced Package Tool) and added CRAN repository and directly retrieved R by apt.
$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 $ sudo add-apt-repository &#39;deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran40/&#39; $ sudo apt update $ sudo apt install r-base Recently, I ran into an issue with cellassign when analyzing single cell datasets.</description>
    </item>
    
    <item>
      <title>生物信息学&amp;计算生物学 常用装机软件汇总整理</title>
      <link>/post/frq-used/</link>
      <pubDate>Thu, 02 Dec 2021 17:41:03 +0800</pubDate>
      
      <guid>/post/frq-used/</guid>
      <description>（未完成，持续更新）
Softwares used in works. Some require built from scratch.
Mac (iOS)  bash tools  brew tree   softwares  R    Ubuntu  Bioinformatics  samtools STAR umi_tools    Single cell biology  R  Seurat   python  geosketch    </description>
    </item>
    
    <item>
      <title>咋地，你也想整点计算生物学玩玩？</title>
      <link>/post/on-comp-bio/</link>
      <pubDate>Thu, 02 Dec 2021 16:49:27 +0800</pubDate>
      
      <guid>/post/on-comp-bio/</guid>
      <description>Nick Loman和Mick Watson在2013年写了一篇Commentary发在NBT上，题为 So you want to be a computational biologist?
文章短小精悍，非常精彩。很多细节能够看出作者是实打实的计算生物学从业者，给出了很多中肯的建议。对于所有有志于从事计算生物学、生物信息学的人，这篇文章值得反复阅读。
几句题外话：Nick Loman 79年生人，年轻时与其兄弟Rupert Loman沉迷电子游戏，后来二人发现比起打游戏他们更擅长组织管理，于是合伙创立了公司Eurogamer Network，后者逐渐发展为欧洲最大的电子媒体之一Gamer Network。
2004年，Nick步入大学，跳出Eurogamer，一头扎进生命医学领域，开始了自己的学术生涯。这哥们后来科研做得风生水起，h-index高达68，现任伯明翰大学教授（2017年转正 #Twitter）~Research Fellow（居然还不是教授&amp;hellip;）~。2018年，Gamer Network被出版巨头Reed收购，说不定Nick利用自己学者身份从中斡旋了一番（没有实锤，我猜的）。
Recently I ran into this wonderful article published in Nature Biotechnology written by Nick Loman and Mick Watson, about how to become a computational biologist. The article is so brilliant and I thought I should dedicate my (actual) first post to write about it.
I&amp;rsquo;ll only put here excerptions of the article that I feel excited about.</description>
    </item>
    
    <item>
      <title>Hugo blog，新主题，新开始</title>
      <link>/post/my-first-post/</link>
      <pubDate>Tue, 23 Nov 2021 19:59:57 +0800</pubDate>
      
      <guid>/post/my-first-post/</guid>
      <description>2022-02-28更新：
去年年底拿Hugo搭了一个博客，但用了没几日就没有动力再写了。我反思了一下可能主要有两个原因，总结一下：
 长篇累牍使用英文撰写，逼格定调得太高。造成的后果是可读性差，效率又低。 今后还是老老实实用母语行文，必要时候可以加入洋文。 选用的主题（hugo-theme-cleanwhite by Huabing）过于花里胡哨。 每次翻阅过去的记录都感觉头晕目眩，遂挑了一个简约的主题重新搭了博客。  业精于勤而荒于嬉。今后还要再接再厉，也许做不到笔耕不辍，但至少也应该保持三天两头写点东西。
这里就先记录下我是如何从hugo-theme-cleanwhite跳到新的主题Diary的。
新主题Diary地址：(https://themes.gohugo.io/themes/hugo-theme-diary/)
 下面是具体步骤。
如链接教程中的Quick Start所述，先用git submodule把Repo部署到本地的blog/themes目录下：
cd my_hugo_site/blog git submodule add https://github.com/AmazingRise/hugo-theme-diary.git themes/diary 接下来可以跳过教程Quick Start中的步骤2、3。
直接到blog目录下，用这个模板，替换config.toml文件中的内容。
由于最初将这个Hugo site部署到github时参考了这篇推文，需要对config.toml进行修改，以满足本地的目录结构。
修改了下面几个参数：
baseURL = &amp;quot;/&amp;quot; title = &amp;quot;Karmotrine Dream&amp;quot; copyright = &amp;quot;&amp;quot; theme = &amp;quot;diary&amp;quot; subtitle = &amp;quot;&amp;quot; 添加下面这个参数，使hugo -D命令生成的网页推到public/目录下：
publishDir = &amp;quot;../public&amp;quot; 删除原来public/目录中所有内容（这些是旧theme生成的文件）。
最后，修改deploy.sh中的命令，使用diary作为theme来生成新的site：
hugo -D -t diary # or `hugo -D` if no theme is specified And Voila!
Hugo博客的theme变为Diary了！</description>
    </item>
    
  </channel>
</rss>
