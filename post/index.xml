<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Karmotrine Dream</title>
    <link>/post/</link>
    <description>Recent content in Posts on Karmotrine Dream</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 27 Feb 2022 22:57:36 +0800</lastBuildDate><atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>多重比较与P值矫正(一)：FWER</title>
      <link>/post/p_correction_fdr/</link>
      <pubDate>Sun, 27 Feb 2022 22:57:36 +0800</pubDate>
      
      <guid>/post/p_correction_fdr/</guid>
      <description>随着高通量技术逐渐发展完善，现代生物学的组学实验已经可以实现同时测量成百上千甚至上万个变量（variables）。如一次转录组实验可以得到10000-20000个基因的转录本丰度，蛋白组实验可以得到几千个有效蛋白肽段的丰度，磷酸化蛋白组可以得到~10000个磷酸化位点的肽段丰度。一组实验中我们往往会设置至少两个条件，而</description>
    </item>
    
    <item>
      <title>纪念今天这个必将载入史册的日子</title>
      <link>/post/%D1%83%D1%80%D0%B0/</link>
      <pubDate>Thu, 24 Feb 2022 22:37:38 +0800</pubDate>
      
      <guid>/post/%D1%83%D1%80%D0%B0/</guid>
      <description>&amp;ldquo;俄军1小时22分占领基辅，战争结束&amp;rdquo;   大约两周前我教唆老爹把持有的黄金卖了，现在肠子都悔青了。
  正文 我曾经持有一个观点：在核威慑平衡的21世纪不可能出现大规模热战。这个观点的内在逻辑在于，在精英主义治国横行的今日，全世界精英之间的共识便是“热战一旦爆发，就有演变为核战的风险”。因此各国政府机关以及首脑应当竭力避免战争冲突的爆发。
现在看来，上面的断论还是过于幼稚了。受这个思维的误导，我之前一直以为俄乌开战是不可能的事情，而今天就真被现实打脸了。
事实上，即便俄罗斯对乌克兰宣战，也并没有看到引爆核战争的潜在风险。因此，“热战引发核战”的逻辑是不成立的。
这次误判最大的失误就是以为“不可能开战”。如果重新梳理最近的新闻消息以及文章便会发现：从内部条件来看，俄国有开战的能力；从外部因素分析，俄国有开战的理由；而内因外因叠加，反而降低了剧烈冲突的可能。
俄乌开战！见证历史
首先从外部角度来看，尽管美国一直叫嚣“一旦开战便会制裁”，但其实美国的决策层恐怕都巴不得俄乌赶快开战。美国希望俄乌开战的最大动机便是促使美元回流，帮助自己度过加息周期。事实上，美国一直在给俄乌双方拱火，一方面给乌克兰提供军火，另一方面在边境地区制造一些局部摩擦；而美国决策团体也知道，只要一直拱火，俄最后一定会忍不住开打。
而从俄罗斯内部角度来说，一方面俄罗斯有抢回俄乌地区控制权的主观意愿，放任家门口的乌国和西方世界你来我往是地缘政治上的巨大风险，俄罗斯不可能置之不理；而从客观条件上来说，俄国军队几十万人已经在边境完成部署，具备发动军事行动的条件。
而所谓的“核战威胁论”，有两个重要前提条件在本次事件中没有满足：
 核战必须发生在两个军事实力对等，并且拥有核武的国家之间。俄有核武军队，而乌没有（或者说乌的军队形同虚设），因此本次军事行动不存在上升为核冲突的必要条件 拥有核武的两端实力，无论是美国还是俄罗斯，在开战上达成了事实上的默契：俄乌开战，美俄均会受益，且二者均没有进一步激化矛盾的必要  总体复盘下来，这次博弈背后最大输家是乌克兰和欧盟。而第二大输家，也许是我大A股的散户吧。
 从另一个角度看此次事件：
俄乌开战，微博吵什么？
这篇短文有诸多精彩之处，在此摘抄几段权当学习。
 而从乌克兰政权的角度来看，在地缘政治层面上美英和法德都需要一个非俄国的政权，但这一政权应当首先保持自身的存在；而从其国内的角度来说，在基辅政府完全不存在任何一点点执政绩效赋予自身合法性的情况下，高昂的反俄情绪就是维系自身存在的基石。但凡事皆有度，一旦反俄操作搞过头，必然导致对反俄叙事本身的解构，特别是总统泽连斯基本人的解构。这些意味着，基辅政权应该选择“冷和平”。
 在后现代主义为主导的今天，任何政治话语都有被“解构主义”瓦解的风险。这条道理尽管在国内适用，然而也要考虑到我国人口组成的复杂性。
 精英（elite）群体深刻的清楚欧洲不应该爆发战争，而无论是笔者在自己身边的键政，还是一些国关学者的讨论，大抵也是同样如此认为俄乌打不起来。不过当然，这一切完全是一种认知，因为根本不存在客观事实：没开战你根本不知道俄罗斯会不会打乌克兰，乌克兰、欧洲都不知道会不会打，俄罗斯没决定该不该打。
但精英群体的认知，并不一定能转化为有效的政治决策。甚至可以说，在乌克兰的冲突发生前后，除了俄罗斯的政治决策还有一定的有效性外，法德的政治决策基本上处于左右互搏的状态。
 因此在大国博弈层面，“精英”(Elite)身份有时并没有什么说服力。这种现象在政治经济等以人的因素为主导的领域表现得尤为明显：只要没有实权，没有切实手段干涉政治决策的运行方向，再多的“精英主义”言论都是空谈。
这让我想起了一年前字节跳动被美国制裁时的情景：一家以高科技著称的技术公司，拥有大量社会意义上可称为“精英”的员工，而在大国博弈的旋涡中毫无招架之力，可见精英主义并不是什么灵丹妙药。在绝对的力量面前，任何班门弄斧玩弄小聪明的行为都毫无意义。
 结语 俄在乌军事行动也许只是这个魔幻年份的开场戏。接下来还会发生哪些精彩事件，让我们拭目以待。</description>
    </item>
    
    <item>
      <title>Tidy Data</title>
      <link>/post/tidy_data/</link>
      <pubDate>Mon, 21 Feb 2022 18:56:53 +0800</pubDate>
      
      <guid>/post/tidy_data/</guid>
      <description>Hadley Wickham提出的Tidy Data的概念方兴未艾，如今无论是R还是Python都能见到Tidy的身影。Tidydata的思维方式，将来必定会越来越深入人心。
正如进入21世纪，计算机基本操作逐渐变为一项几乎必修的技能一样，将来十几年内，Tidydata对DataFrame的操作也一定会演变成一项必修技能。
如果要开一个计算生物学101的课程，&amp;ldquo;Tidy Data&amp;quot;这篇文章一定是必读清单的一篇文章。而且应该安排学生每学期花60个学时以上的时间上机实操锻炼Tidydata的操作。（我真是魔鬼）</description>
    </item>
    
    <item>
      <title>一图看懂单细胞文库Reads的组成成分</title>
      <link>/post/10x_reads_composition/</link>
      <pubDate>Sun, 20 Feb 2022 10:55:43 +0800</pubDate>
      
      <guid>/post/10x_reads_composition/</guid>
      <description>这篇文章是前两篇技术文档的后续：
 10X CellRanger 中测序饱和度的定义与计算（一） 10X CellRanger 中测序饱和度的定义与计算（二）  前两篇文章成文过程中我意识到，单细胞测序文库从Raw Data到Deduplicated Reads，其实是一个non-trivial的流程。从fastq文件下机开始，不同来源的Reads需经过层层计算和筛选，最终只有少部分Reads能保留在表达矩阵（或counts table）中。这里用一张图总结，以帮助我们更好地理解单细胞文库的建库和上游分析（Upstream Analysis）。
   以ScRNAseq_smkpipe_at_Luolab的分析pipeline为例。
这套流程主要针对使用了Barcode + UMI的技术。
流程图读法：从下往上读，不同颜色代表不同分析阶段的Reads；画斜条纹阴影的线段表示当前步骤到下一步中被清除掉的Reads。
 黑色：Total Input Reads，一般我用的是测序下机后的Clean Reads（公司给的QC质控后的Cleandata） 黑色-&amp;gt;紫色：umi_tools whitelist, wash_whitelist, umi_tools extract 黑色阴影：Reads with Non-correctable Reads, invalid Barcode &amp;amp; UMI (discarded) 紫色：Barcode有效的Reads（Reads with valid Barcode &amp;amp; UMI） 紫色-&amp;gt;黄色：STAR 紫色阴影：Reads NOT Unique Mapped to Genome (discarded) 黄色：Unique Mapped Reads，在10X中也叫Confidently Mapped Reads（Unique Mapped, valid Barcode &amp;amp; UMI Reads） 黄色-&amp;gt;绿色：featureCounts 黄色阴影：Unique Mapped, valid Barcode &amp;amp; UMI but NOT assigned to feature 绿色：Effective Reads，即Unique Mapped, valid Barcode &amp;amp; UMI, feature assigned Reads 绿色-&amp;gt;蓝色：umi_tools count 蓝色阴影：Reads Collapsed due to UMI deduplication 蓝色：Deduplicated Reads，即最终用于生成表达矩阵的对Reads计数的结果  有了这张图，我们可以做一个简单直观的推论：如果想提高单细胞测序的技术质量，则必须尽可能减少阴影部分的Reads在总文库中的比例。</description>
    </item>
    
    <item>
      <title>Hugo：启用Mathjax实现数学公式的编辑与显示</title>
      <link>/post/deploy_mathjax/</link>
      <pubDate>Sat, 12 Feb 2022 21:17:37 +0800</pubDate>
      
      <guid>/post/deploy_mathjax/</guid>
      <description>The HUGO official document has a nice blog about MathJax Support. Additionally, a blog written by Geoff Ruddock has a more concise solution: Render LaTeX math expressions in Hugo with MathJax 3.
TL;DR  Create a file in your theme directory layouts/partials/mathjax_support.html as the following:  &amp;lt;script&amp;gt; MathJax = { tex: { inlineMath: [[&#39;$&#39;, &#39;$&#39;], [&#39;\\(&#39;, &#39;\\)&#39;]], displayMath: [[&#39;$$&#39;,&#39;$$&#39;], [&#39;\\[&#39;, &#39;\\]&#39;]], processEscapes: true, processEnvironments: true }, options: { skipHtmlTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;] } }; window.</description>
    </item>
    
    <item>
      <title>10X CellRanger 中测序饱和度的定义与计算（一）</title>
      <link>/post/10x_calc_saturation_1/</link>
      <pubDate>Tue, 08 Feb 2022 22:05:51 +0800</pubDate>
      
      <guid>/post/10x_calc_saturation_1/</guid>
      <description>最近为了搭建单细胞测序上游分析的Pipeline，正在研究怎样对分析结果做质控（Pipeline详情移步https://github.com/RuiyuRayWang/ScRNAseq_smkpipe_at_Luolab）。参考了10X CellRanger官方网站中描述的对测序饱和度的定义和计算方法：
 10X 官方文档：什么是测序饱和度？ 10X 官方文档：测序饱和度怎样计算？  将用两篇文章记录这部分内容。
注意：本系列文章的参考来源均为10X官方公开的信息。
这篇文章是本系列文章的第一篇，将对相关概念和计算公式的定义进行解读。
 一、测序饱和度 和 文库复杂度 关于测序饱和度的定义，引用10X文档中的说明：
 Question: What is sequencing saturation?
Answer: Sequencing saturation is a measure of the fraction of library complexity that was sequenced in a given experiment. The inverse of the sequencing saturation can be interpreted as the number of additional reads it would take to detect a new transcript.
 这两句话言简而意赅，点明了测序饱和度(sequencing saturation)与文库复杂度(library complexity)之间的关系。
library complexity (文库复杂度)，指的是一个测序文库中非冗余的DNA片段的数量（the number of unique DNA fragments present in a given library）。</description>
    </item>
    
    <item>
      <title>10X CellRanger 中测序饱和度的定义与计算（二）</title>
      <link>/post/10x_calc_saturation_2/</link>
      <pubDate>Tue, 08 Feb 2022 22:05:51 +0800</pubDate>
      
      <guid>/post/10x_calc_saturation_2/</guid>
      <description>最近为了搭建单细胞测序上游分析的Pipeline，正在研究怎样对分析结果做质控（Pipeline详情移步https://github.com/RuiyuRayWang/ScRNAseq_smkpipe_at_Luolab）。参考了10X CellRanger官方网站中描述的对测序饱和度的定义和计算方法：
 10X 官方文档：什么是测序饱和度？ 10X 官方文档：测序饱和度怎样计算？  将用两篇文章记录这部分内容。
注意：本系列文章的参考来源均为10X官方公开的信息。
这篇文章是本系列文章的第二篇，将利用10X官方文档中的示例数据来展示测序饱和度计算的代码复现。
 下载数据：
 Uses dataset at https://support.10xgenomics.com/single-cell-gene-expression/datasets/3.0.0/pbmc_1k_v3, where the web summary report gives a sequencing saturation value of 0.7085123.​
 web_summary.html
 计算公式：
 The sequencing saturation calculation below matches the 0.7085123 sequencing saturation given in the web summary report.
 unique_confidently_mapped_reads = 10,196,940 duplicate_reads = 24,785,461 x = 1 - (unique_confidently_mapped_reads/(unique_confidently_mapped_reads + duplicate_reads)) x = 1 - (10,196,940/(10,196,940 + 24,785,461)) x = 1 - (10,196,940/34,982,401) x = 1 - 0.</description>
    </item>
    
    <item>
      <title>R SCENIC：安装与部署</title>
      <link>/post/install-r-scenic/</link>
      <pubDate>Wed, 22 Dec 2021 12:32:17 +0800</pubDate>
      
      <guid>/post/install-r-scenic/</guid>
      <description>TL;DR First consulted this page
I have R-4.0.5 with Bioconductor 3.12(4.0), use the latest scripts for installation.
In Rstudio:
&amp;gt; if (!requireNamespace(&amp;quot;BiocManager&amp;quot;, quietly = TRUE)) install.packages(&amp;quot;BiocManager&amp;quot;) &amp;gt; BiocManager::version() &amp;gt; # If your bioconductor version is previous to 4.0, see the section bellow &amp;gt; &amp;gt; ## Required &amp;gt; BiocManager::install(c(&amp;quot;AUCell&amp;quot;, &amp;quot;RcisTarget&amp;quot;)) &amp;gt; BiocManager::install(c(&amp;quot;GENIE3&amp;quot;)) # Optional. Can be replaced by GRNBoost &amp;gt; &amp;gt; ## Optional (but highly recommended): &amp;gt; # To score the network on cells (i.</description>
    </item>
    
    <item>
      <title>Working with pySCENIC</title>
      <link>/post/using-scenic/</link>
      <pubDate>Wed, 15 Dec 2021 23:07:11 +0800</pubDate>
      
      <guid>/post/using-scenic/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Tensorflow：多版本部署、系统配置与版本切换</title>
      <link>/post/build-tensorflow/</link>
      <pubDate>Sun, 05 Dec 2021 22:57:25 +0800</pubDate>
      
      <guid>/post/build-tensorflow/</guid>
      <description>Building Environments for Cellassign and CellBLAST with multiple Tensorflow (GPU) Versions on Ubuntu As promised, I will write about my experience with installing tensorflow.
Why did I ever have to build Tensorflow myself?
The reason is that I was trying to use two tools: cellassign and Cell_BLAST, but they depend on different tensorflow versions. To make them both work, I used the following build strategy that allows different Tensorflow versions installed and run in separate conda environments.</description>
    </item>
    
    <item>
      <title>R：同时部署多版本 &amp; 版本切换</title>
      <link>/post/mult-r/</link>
      <pubDate>Thu, 02 Dec 2021 19:54:09 +0800</pubDate>
      
      <guid>/post/mult-r/</guid>
      <description>Clean Built of Multiple R Versions on Ubuntu Long time ago I built R-4.0.3 on Ubuntu system following these guides: link1, link2. Briefly, I added GPG Key to APT (Advanced Package Tool) and added CRAN repository and directly retrieved R by apt.
$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 $ sudo add-apt-repository &#39;deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran40/&#39; $ sudo apt update $ sudo apt install r-base Recently, I ran into an issue with cellassign when analyzing single cell datasets.</description>
    </item>
    
    <item>
      <title>生物信息学&amp;计算生物学 常用装机软件汇总整理</title>
      <link>/post/frq-used/</link>
      <pubDate>Thu, 02 Dec 2021 17:41:03 +0800</pubDate>
      
      <guid>/post/frq-used/</guid>
      <description>（未完成，持续更新）
Softwares used in works. Some require built from scratch.
Mac (iOS)  bash tools  brew tree   softwares  R    Ubuntu  Bioinformatics  samtools STAR umi_tools    Single cell biology  R  Seurat   python  geosketch    </description>
    </item>
    
    <item>
      <title>咋地，你也想整点计算生物学玩玩？</title>
      <link>/post/on-comp-bio/</link>
      <pubDate>Thu, 02 Dec 2021 16:49:27 +0800</pubDate>
      
      <guid>/post/on-comp-bio/</guid>
      <description>Nick Loman和Mick Watson在2013年写了一篇Commentary发在NBT上，题为 So you want to be a computational biologist?
文章短小精悍，非常精彩。很多细节能够看出作者是实打实的计算生物学从业者，给出了很多中肯的建议。对于所有有志于从事计算生物学、生物信息学的人，这篇文章值得反复阅读。
几句题外话：Nick Loman 79年生人，年轻时与其兄弟Rupert Loman沉迷电子游戏，后来二人发现比起打游戏他们更擅长组织管理，于是合伙创立了公司Eurogamer Network，后者逐渐发展为欧洲最大的电子媒体之一Gamer Network。
2004年，Nick步入大学，跳出Eurogamer，一头扎进生命医学领域，开始了自己的学术生涯。这哥们后来科研做得风生水起，h-index高达68，现任伯明翰大学教授（2017年转正 #Twitter）~Research Fellow（居然还不是教授&amp;hellip;）~。2018年，Gamer Network被出版巨头Reed收购，说不定Nick利用自己学者身份从中斡旋了一番（没有实锤，我猜的）。
Recently I ran into this wonderful article published in Nature Biotechnology written by Nick Loman and Mick Watson, about how to become a computational biologist. The article is so brilliant and I thought I should dedicate my (actual) first post to write about it.
I&amp;rsquo;ll only put here excerptions of the article that I feel excited about.</description>
    </item>
    
    <item>
      <title>Hugo blog，新主题，新开始</title>
      <link>/post/my-first-post/</link>
      <pubDate>Tue, 23 Nov 2021 19:59:57 +0800</pubDate>
      
      <guid>/post/my-first-post/</guid>
      <description>2022-02-28更新：
去年年底拿Hugo搭了一个博客，但用了没几日就没有动力再写了。我反思了一下可能主要有两个原因，总结一下：
 长篇累牍使用英文撰写，逼格定调得太高。造成的后果是可读性差，效率又低。 今后还是老老实实用母语行文，必要时候可以加入洋文。 选用的主题（hugo-theme-cleanwhite by Huabing）过于花里胡哨。 每次翻阅过去的记录都感觉头晕目眩，遂挑了一个简约的主题重新搭了博客。  业精于勤而荒于嬉。今后还要再接再厉，也许做不到笔耕不辍，但至少也应该保持三天两头写点东西。
这里就先记录下我是如何从hugo-theme-cleanwhite跳到新的主题Diary的。
新主题Diary地址：(https://themes.gohugo.io/themes/hugo-theme-diary/)
 下面是具体步骤。
如链接教程中的Quick Start所述，先用git submodule把Repo部署到本地的blog/themes目录下：
cd my_hugo_site/blog git submodule add https://github.com/AmazingRise/hugo-theme-diary.git themes/diary 接下来可以跳过教程Quick Start中的步骤2、3。
直接到blog目录下，用这个模板，替换config.toml文件中的内容。
由于最初将这个Hugo site部署到github时参考了这篇推文，需要对config.toml进行修改，以满足本地的目录结构。
修改了下面几个参数：
baseURL = &amp;quot;/&amp;quot; title = &amp;quot;Karmotrine Dream&amp;quot; copyright = &amp;quot;&amp;quot; theme = &amp;quot;diary&amp;quot; subtitle = &amp;quot;&amp;quot; 添加下面这个参数，使hugo -D命令生成的网页推到public/目录下：
publishDir = &amp;quot;../public&amp;quot; 删除原来public/目录中所有内容（这些是旧theme生成的文件）。
最后，修改deploy.sh中的命令，使用diary作为theme来生成新的site：
hugo -D -t diary # or `hugo -D` if no theme is specified And Voila!
Hugo博客的theme变为Diary了！</description>
    </item>
    
  </channel>
</rss>
